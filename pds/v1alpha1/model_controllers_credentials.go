/*
PDS API

Portworx Data Services API Server

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pds

import (
	"encoding/json"
)

// checks if the ControllersCredentials type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ControllersCredentials{}

// ControllersCredentials struct for ControllersCredentials
type ControllersCredentials struct {
	Azure *ModelsAzureCredentials `json:"azure,omitempty"`
	Google *ModelsGoogleCredentials `json:"google,omitempty"`
	S3 *ModelsS3Credentials `json:"s3,omitempty"`
	S3Compatible *ModelsS3CompatibleCredentials `json:"s3_compatible,omitempty"`
}

// NewControllersCredentials instantiates a new ControllersCredentials object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewControllersCredentials() *ControllersCredentials {
	this := ControllersCredentials{}
	return &this
}

// NewControllersCredentialsWithDefaults instantiates a new ControllersCredentials object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewControllersCredentialsWithDefaults() *ControllersCredentials {
	this := ControllersCredentials{}
	return &this
}

// GetAzure returns the Azure field value if set, zero value otherwise.
func (o *ControllersCredentials) GetAzure() ModelsAzureCredentials {
	if o == nil || IsNil(o.Azure) {
		var ret ModelsAzureCredentials
		return ret
	}
	return *o.Azure
}

// GetAzureOk returns a tuple with the Azure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ControllersCredentials) GetAzureOk() (*ModelsAzureCredentials, bool) {
	if o == nil || IsNil(o.Azure) {
		return nil, false
	}
	return o.Azure, true
}

// HasAzure returns a boolean if a field has been set.
func (o *ControllersCredentials) HasAzure() bool {
	if o != nil && !IsNil(o.Azure) {
		return true
	}

	return false
}

// SetAzure gets a reference to the given ModelsAzureCredentials and assigns it to the Azure field.
func (o *ControllersCredentials) SetAzure(v ModelsAzureCredentials) {
	o.Azure = &v
}

// GetGoogle returns the Google field value if set, zero value otherwise.
func (o *ControllersCredentials) GetGoogle() ModelsGoogleCredentials {
	if o == nil || IsNil(o.Google) {
		var ret ModelsGoogleCredentials
		return ret
	}
	return *o.Google
}

// GetGoogleOk returns a tuple with the Google field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ControllersCredentials) GetGoogleOk() (*ModelsGoogleCredentials, bool) {
	if o == nil || IsNil(o.Google) {
		return nil, false
	}
	return o.Google, true
}

// HasGoogle returns a boolean if a field has been set.
func (o *ControllersCredentials) HasGoogle() bool {
	if o != nil && !IsNil(o.Google) {
		return true
	}

	return false
}

// SetGoogle gets a reference to the given ModelsGoogleCredentials and assigns it to the Google field.
func (o *ControllersCredentials) SetGoogle(v ModelsGoogleCredentials) {
	o.Google = &v
}

// GetS3 returns the S3 field value if set, zero value otherwise.
func (o *ControllersCredentials) GetS3() ModelsS3Credentials {
	if o == nil || IsNil(o.S3) {
		var ret ModelsS3Credentials
		return ret
	}
	return *o.S3
}

// GetS3Ok returns a tuple with the S3 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ControllersCredentials) GetS3Ok() (*ModelsS3Credentials, bool) {
	if o == nil || IsNil(o.S3) {
		return nil, false
	}
	return o.S3, true
}

// HasS3 returns a boolean if a field has been set.
func (o *ControllersCredentials) HasS3() bool {
	if o != nil && !IsNil(o.S3) {
		return true
	}

	return false
}

// SetS3 gets a reference to the given ModelsS3Credentials and assigns it to the S3 field.
func (o *ControllersCredentials) SetS3(v ModelsS3Credentials) {
	o.S3 = &v
}

// GetS3Compatible returns the S3Compatible field value if set, zero value otherwise.
func (o *ControllersCredentials) GetS3Compatible() ModelsS3CompatibleCredentials {
	if o == nil || IsNil(o.S3Compatible) {
		var ret ModelsS3CompatibleCredentials
		return ret
	}
	return *o.S3Compatible
}

// GetS3CompatibleOk returns a tuple with the S3Compatible field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ControllersCredentials) GetS3CompatibleOk() (*ModelsS3CompatibleCredentials, bool) {
	if o == nil || IsNil(o.S3Compatible) {
		return nil, false
	}
	return o.S3Compatible, true
}

// HasS3Compatible returns a boolean if a field has been set.
func (o *ControllersCredentials) HasS3Compatible() bool {
	if o != nil && !IsNil(o.S3Compatible) {
		return true
	}

	return false
}

// SetS3Compatible gets a reference to the given ModelsS3CompatibleCredentials and assigns it to the S3Compatible field.
func (o *ControllersCredentials) SetS3Compatible(v ModelsS3CompatibleCredentials) {
	o.S3Compatible = &v
}

func (o ControllersCredentials) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ControllersCredentials) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Azure) {
		toSerialize["azure"] = o.Azure
	}
	if !IsNil(o.Google) {
		toSerialize["google"] = o.Google
	}
	if !IsNil(o.S3) {
		toSerialize["s3"] = o.S3
	}
	if !IsNil(o.S3Compatible) {
		toSerialize["s3_compatible"] = o.S3Compatible
	}
	return toSerialize, nil
}

type NullableControllersCredentials struct {
	value *ControllersCredentials
	isSet bool
}

func (v NullableControllersCredentials) Get() *ControllersCredentials {
	return v.value
}

func (v *NullableControllersCredentials) Set(val *ControllersCredentials) {
	v.value = val
	v.isSet = true
}

func (v NullableControllersCredentials) IsSet() bool {
	return v.isSet
}

func (v *NullableControllersCredentials) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableControllersCredentials(val *ControllersCredentials) *NullableControllersCredentials {
	return &NullableControllersCredentials{value: val, isSet: true}
}

func (v NullableControllersCredentials) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableControllersCredentials) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


