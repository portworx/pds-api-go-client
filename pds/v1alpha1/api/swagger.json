{
    "swagger": "2.0",
    "info": {
        "description": "Portworx Data Services API Server",
        "title": "PDS API",
        "contact": {}
    },
    "paths": {
        "/api/account-role-invitations/{id}": {
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Removes a single AccountRoleInvitation",
                "tags": [
                    "AccountsRoleInvitations"
                ],
                "summary": "Delete AccountRoleInvitation",
                "parameters": [
                    {
                        "type": "string",
                        "description": "AccountRoleInvitation ID (must be valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Patches AccountRoleInvitation role_name",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AccountsRoleInvitations"
                ],
                "summary": "Patch AccountRoleInvitation role_name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "AccountRoleInvitation ID (must be valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Object with patched role name",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.PatchAccountRoleInvitationRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/api/accounts": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Lists Accounts.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Accounts"
                ],
                "summary": "List Accounts",
                "parameters": [
                    {
                        "type": "string",
                        "description": "A given Accounts attribute to sort results by (one of: id, name, created_at)",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Maximum number of rows to return (could be less)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Use a token returned by a previous query to continue listing with the next batch of rows",
                        "name": "continuation",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter results by Accounts id",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter results by Accounts name",
                        "name": "name",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.PaginatedResult-models_Account"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Creates a new Account",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Accounts"
                ],
                "summary": "Create Account",
                "parameters": [
                    {
                        "description": "Request body containing name of the account",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.createAccountRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The created Account will be returned",
                        "schema": {
                            "$ref": "#/definitions/models.Account"
                        }
                    }
                }
            }
        },
        "/api/accounts/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Fetches a single Account",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Accounts"
                ],
                "summary": "Get Account",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Account ID (must be valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Account"
                        }
                    }
                }
            }
        },
        "/api/accounts/{id}/account-role-invitations": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Lists Account Role Invitations",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Accounts"
                ],
                "summary": "List Account Role Invitations",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Account ID (must be valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "A given User attribute to sort results by (one of: id, email, role_name, created_at)",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Maximum number of rows to return (could be less)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Use a token returned by a previous query to continue listing with the next batch of rows",
                        "name": "continuation",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter results by invitation id",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter results by User email",
                        "name": "email",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter results by assigned role name",
                        "name": "role_name",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.PaginatedResult-models_AccountRoleInvitation"
                        }
                    }
                }
            }
        },
        "/api/accounts/{id}/dns-details": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Update DNS details for desired account",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Accounts DNS"
                ],
                "summary": "Update DNS Details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Account ID (must be valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Request body containing a new DNS details",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.DNSDetails"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/api/accounts/{id}/eula": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Accept a specific EULA version",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Accounts"
                ],
                "summary": "Accept EULA",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Account ID (must be valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Request body containing the version of the EULA.",
                        "name": "Body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.acceptEULARequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/api/accounts/{id}/global-config": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Modify AccountGlobalConfig for this Account",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Accounts"
                ],
                "summary": "Update AccountGlobalConfig",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Account ID (must be valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Request body containing the global config values. Empty values are ignored.",
                        "name": "Body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.updateGlobalConfigRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/api/accounts/{id}/invitations": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Adds role binding to existing user or creates invitation if user does not exist.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AccountRoleBindings"
                ],
                "summary": "Create Invitation",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Account ID (must be valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Request body containing the invitation details.",
                        "name": "Body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.InvitationAccountRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The account role binding has been created."
                    },
                    "400": {
                        "description": "The request doesn't contain valid invitation details."
                    },
                    "404": {
                        "description": "The user with specified email doesn't exist."
                    },
                    "422": {
                        "description": "The user is already assigned to this account."
                    }
                }
            }
        },
        "/api/accounts/{id}/maas-details": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns MAAS details for desired account",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Accounts MAASDetails"
                ],
                "summary": "Get MAAS details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Account ID (must be valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.MAASDetails"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Updates MAAS details for desired account",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Accounts MAASDetails"
                ],
                "summary": "Update MAAS details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Account ID (must be valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/api/accounts/{id}/role-bindings": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Lists AccountRoleBinding",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AccountRoleBindings"
                ],
                "summary": "List AccountRoleBinding",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Account ID (must be valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "A given AccountRoleBinding attribute to sort results by (one of: role_name, actor_id)",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter results by AccountRoleBinding assigned role name",
                        "name": "role_name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter results by AccountRoleBinding actor id",
                        "name": "actor_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter results by AccountRoleBinding actor type",
                        "name": "actor_type",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controllers.PaginatedAccountRoleBindings"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Creates a new AccountRoleBinding, or updates role_name if binding for (actor_id, actor_type) already exists.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AccountRoleBindings"
                ],
                "summary": "Create/Update AccountRoleBinding",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Account ID (must be valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Request body containing the account role binding",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.upsertAccountRoleBindingRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The created AccountRoleBinding will be returned",
                        "schema": {
                            "$ref": "#/definitions/models.AccountRoleBinding"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Removes a single AccountRoleBinding",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "AccountRoleBindings"
                ],
                "summary": "Delete AccountRoleBinding",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Account ID (must be valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Request body containing the account role binding",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.DeleteRoleBindingRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/api/accounts/{id}/tenants": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Lists Tenants.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tenants"
                ],
                "summary": "List Account's Tenants",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Account ID (must be valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "A given Tenant attribute to sort results by (one of: id, name, created_at)",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Maximum number of rows to return (could be less)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Use a token returned by a previous query to continue listing with the next batch of rows",
                        "name": "continuation",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter results by Tenant id",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter results by Tenant name",
                        "name": "name",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.PaginatedResult-models_Tenant"
                        }
                    }
                }
            }
        },
        "/api/accounts/{id}/users": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Lists Account Users",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Accounts"
                ],
                "summary": "List Account Users",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Account ID (must be valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "A given User attribute to sort results by (one of: id, email, created_at)",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Maximum number of rows to return (could be less)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Use a token returned by a previous query to continue listing with the next batch of rows",
                        "name": "continuation",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter results by User id",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter results by User email",
                        "name": "email",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.PaginatedResult-models_User"
                        }
                    }
                }
            }
        },
        "/api/application-configuration-templates/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Fetches a single ApplicationConfigurationTemplate",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ApplicationConfigurationTemplates"
                ],
                "summary": "Get ApplicationConfigurationTemplate",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ApplicationConfigurationTemplate ID (must be valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ApplicationConfigurationTemplate"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Updates existing ApplicationConfigurationTemplate",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ApplicationConfigurationTemplates"
                ],
                "summary": "Update ApplicationConfigurationTemplate",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ApplicationConfigurationTemplate ID (must be valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Request body containing updated template",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.UpdateApplicationConfigurationTemplateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The updated application configuration template will be returned",
                        "schema": {
                            "$ref": "#/definitions/models.ApplicationConfigurationTemplate"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Removes a single ApplicationConfigurationTemplate",
                "tags": [
                    "ApplicationConfigurationTemplates"
                ],
                "summary": "Delete ApplicationConfigurationTemplates",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ApplicationConfigurationTemplate ID (must be valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/api/authorizer": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Check if the provided operation is allowed",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authorizer"
                ],
                "summary": "Authorize operation",
                "parameters": [
                    {
                        "description": "Request body containing the authorizer request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.AuthorizerRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.AuthorizerResponse"
                        }
                    }
                }
            }
        },
        "/api/backup-credentials/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Fetches a single BackupCredentials",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "BackupCredentials"
                ],
                "summary": "Get BackupCredentials",
                "parameters": [
                    {
                        "type": "string",
                        "description": "BackupCredentials ID (must be valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.BackupCredentials"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Updates an existing instance of BackupCredentials",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "BackupCredentials"
                ],
                "summary": "Update BackupCredentials",
                "parameters": [
                    {
                        "type": "string",
                        "description": "BackupCredentials ID (must be UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Request body containing the backup credentials config",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.updateBackupCredentialsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The updated BackupCredentials will be returned",
                        "schema": {
                            "$ref": "#/definitions/models.BackupCredentials"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Removes a single BackupCredential",
                "tags": [
                    "BackupCredentials"
                ],
                "summary": "Delete BackupCredentials",
                "parameters": [
                    {
                        "type": "string",
                        "description": "BackupCredentials ID (must be valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/api/backup-credentials/{id}/credentials": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get cloud configuration for BackupCredentials",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "BackupCredentials"
                ],
                "summary": "Get cloud configuration for BackupCredentials",
                "parameters": [
                    {
                        "type": "string",
                        "description": "BackupCredentials ID (must be valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Cloud configuration for BackupCredentials",
                        "schema": {
                            "$ref": "#/definitions/controllers.PartialCredentials"
                        }
                    }
                }
            }
        },
        "/api/backup-jobs/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Fetches a BackupJob",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "BackupJobs"
                ],
                "summary": "Get BackupJob",
                "parameters": [
                    {
                        "type": "string",
                        "description": "BackupJob ID (must be valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.BackupJob"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Updates a BackupJob if ID exists, Creates new BackupJob if not",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "BackupJobs"
                ],
                "summary": "Upsert BackupJob",
                "parameters": [
                    {
                        "type": "string",
                        "description": "BackupJob ID (must be UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Request body containing backup job details",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.PutBackupJobRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The upserted BackupJob will be returned",
                        "schema": {
                            "$ref": "#/definitions/models.BackupJob"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Removes a single BackupJob",
                "tags": [
                    "BackupJobs"
                ],
                "summary": "Delete BackupJob",
                "parameters": [
                    {
                        "type": "string",
                        "description": "BackupJob ID (must be valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/api/backup-jobs/{id}/restore": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Starts restore of given BackupJob",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Restores"
                ],
                "summary": "Start Restore",
                "parameters": [
                    {
                        "type": "string",
                        "description": "BackupJob ID (must be valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Request body containing information about required restore",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.CreateRestoreRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Restore"
                        }
                    }
                }
            }
        },
        "/api/backup-policies/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Fetches a single BackupPolicy",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "BackupPolicies"
                ],
                "summary": "Get BackupPolicy",
                "parameters": [
                    {
                        "type": "string",
                        "description": "BackupPolicy ID (must be valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.BackupPolicy"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Updates existing BackupPolicy",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "BackupPolicies"
                ],
                "summary": "Update BackupPolicy",
                "parameters": [
                    {
                        "type": "string",
                        "description": "BackupPolicy ID (must be valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Request body containing updated backup policy",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.UpdateBackupPolicyRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The updated backup policy will be returned",
                        "schema": {
                            "$ref": "#/definitions/models.BackupPolicy"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Removes a single BackupPolicy",
                "tags": [
                    "BackupPolicies"
                ],
                "summary": "Delete BackupPolicies",
                "parameters": [
                    {
                        "type": "string",
                        "description": "BackupPolicy ID (must be valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/api/backup-targets/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Fetches a single BackupTarget",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "BackupTargets"
                ],
                "summary": "Get BackupTarget",
                "parameters": [
                    {
                        "type": "string",
                        "description": "BackupTarget ID (must be valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.BackupTarget"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Updates existing BackupTarget",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "BackupTargets"
                ],
                "summary": "Update BackupTarget",
                "parameters": [
                    {
                        "type": "string",
                        "description": "BackupTarget ID (must be valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Object with partial update fields",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.UpdateBackupTargetRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "The updated BackupTarget will be returned",
                        "schema": {
                            "$ref": "#/definitions/models.BackupTarget"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Removes a single BackupTarget",
                "tags": [
                    "BackupTargets"
                ],
                "summary": "Delete BackupTargets",
                "parameters": [
                    {
                        "type": "string",
                        "description": "BackupTarget ID (must be valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Delete backup target even if the deletion job fails on any deployment targets",
                        "name": "force",
                        "in": "query"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/api/backup-targets/{id}/backups": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Lists Backups belonging to the BackupTarget.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Backups"
                ],
                "summary": "List BackupTarget's Backups",
                "parameters": [
                    {
                        "type": "string",
                        "description": "BackupTarget ID (must be valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "A given Backup attribute to sort results by (one of: id, cluster_resource_name, created_at, backup_type, backup_level)",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Maximum number of rows to return (could be less)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Use a token returned by a previous query to continue listing with the next batch of rows",
                        "name": "continuation",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter results by Backup id",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter results by Backup cluster_resource_name",
                        "name": "cluster_resource_name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter results by Backup state",
                        "name": "state",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter results by Backup suspend flag",
                        "name": "suspend",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter results by Backup type (one of: adhoc,scheduled)",
                        "name": "backup_type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter results by Backup type (one of: snapshot,incremental)",
                        "name": "backup_level",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.PaginatedResult-models_Backup"
                        }
                    }
                }
            }
        },
        "/api/backup-targets/{id}/retry": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retries to sync failed BackupTargetState",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "BackupTargets"
                ],
                "summary": "Retry sync of a BackupTarget",
                "parameters": [
                    {
                        "type": "string",
                        "description": "BackupTargetState ID (must be valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/api/backup-targets/{id}/states": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Lists BackupTarget's BackupTargetStates",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "BackupTargets"
                ],
                "summary": "List BackupTarget's BackupTargetStates",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Backup Target ID (must be valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Maximum number of rows to return (could be less)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Use a token returned by a previous query to continue listing with the next batch of rows",
                        "name": "continuation",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "A given BackupTargetState attribute to sort results by (one of: state, deployment_target_id, backup_target_id)",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter results by BackupTarget ID",
                        "name": "backup_target_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter results by DeploymentTarget ID",
                        "name": "deployment_target_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter results by state",
                        "name": "state",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controllers.PaginatedBackupTargetStates"
                        }
                    }
                }
            }
        },
        "/api/backups/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Fetches a single Backup",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Backups"
                ],
                "summary": "Get Backup",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Backup ID (must be a valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Backup"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Updates an existing database Backup",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Backups"
                ],
                "summary": "Update Backup",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Backup ID (must be UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "description": "Set to true to only update the Backup object in the database (does not create any actual resources)",
                        "name": "Local-Only",
                        "in": "header"
                    },
                    {
                        "description": "Request body containing updated backup",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.updateBackupRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The updated Backup will be returned",
                        "schema": {
                            "$ref": "#/definitions/models.Backup"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Deletes an existing database deployment Backup",
                "tags": [
                    "Backups"
                ],
                "summary": "Delete Backup",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Backup ID (must be a valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "description": "Set to true to only delete the Backup object in the database (does not delete any actual resources)",
                        "name": "Local-Only",
                        "in": "header"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/api/backups/{id}/jobs": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves a list of BackupJobs associated to this Backup",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "BackupJobs"
                ],
                "summary": "List Backup's Jobs",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Backup ID (must be valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controllers.BackupJobsResponse"
                        }
                    }
                }
            }
        },
        "/api/backups/{id}/jobs/{name}": {
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Deletes an existing job for scheduled backups",
                "tags": [
                    "Backups"
                ],
                "summary": "Delete Backup jobs",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Backup ID (must be a valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Backup job name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/api/compatible-versions": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Lists what versions are compatible for other versions.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Versions"
                ],
                "summary": "List compatible versions",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter results by data_service_id",
                        "name": "data_service_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter results by version_id",
                        "name": "version_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controllers.CompatibleVersionsResponse"
                        }
                    }
                }
            }
        },
        "/api/data-services": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Lists Data Services",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DataServices"
                ],
                "summary": "List Data Services",
                "parameters": [
                    {
                        "type": "string",
                        "description": "A given Data Service attribute to sort results by (one of: id, name, short_name, created_at)",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Maximum number of rows to return (could be less)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Use a token returned by a previous query to continue listing with the next batch of rows",
                        "name": "continuation",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter results by Data Service ID",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter results by Data Service name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter results by Data Service short name",
                        "name": "short_name",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Filter results based on incremental backup eligibility",
                        "name": "has_incremental_backup",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Filter results based on vault full backup eligibility",
                        "name": "has_full_backup",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Filter results based on 'Coming soon' flag",
                        "name": "coming_soon",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.PaginatedResult-models_DataService"
                        }
                    }
                }
            }
        },
        "/api/data-services/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Fetches a single Data Service",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DataServices"
                ],
                "summary": "Get Data Service",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Data Service ID (must be a valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.DataService"
                        }
                    }
                }
            }
        },
        "/api/data-services/{id}/versions": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Lists Versions belonging to the Data Service.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Versions"
                ],
                "summary": "List Data Service's Versions",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Data Service ID (must be valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "A given Version attribute to sort results by (one of: id, name, created_at)",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Maximum number of rows to return (could be less)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Use a token returned by a previous query to continue listing with the next batch of rows",
                        "name": "continuation",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter results by Version id",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter results by Version's name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Filter results by Version's enabled parameter",
                        "name": "enabled",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.PaginatedResult-models_Version"
                        }
                    }
                }
            }
        },
        "/api/db-tasks/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Fetches a database Task",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tasks"
                ],
                "summary": "Get Task",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Task ID (must be valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Task"
                        }
                    }
                }
            }
        },
        "/api/default-templates/application-configuration": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Lists ApplicationConfigurationSamples",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SampleTemplates"
                ],
                "summary": "List ApplicationConfigurationSamples",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter results by DataService ID",
                        "name": "data_service_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controllers.ApplicationConfigurationSamples"
                        }
                    }
                }
            }
        },
        "/api/default-templates/backup-policies": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Lists BackupPolicySamples",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SampleTemplates"
                ],
                "summary": "List BackupPolicySamples",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controllers.BackupPolicySamples"
                        }
                    }
                }
            }
        },
        "/api/default-templates/resource-settings": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Lists ResourceSettingsSamples",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SampleTemplates"
                ],
                "summary": "List ResourceSettingsSamples",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter results by DataService ID",
                        "name": "data_service_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controllers.ResourceSettingsSamples"
                        }
                    }
                }
            }
        },
        "/api/default-templates/storage-options": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Lists StorageOptionsSamples",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SampleTemplates"
                ],
                "summary": "List StorageOptionsSamples",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controllers.StorageOptionsSamples"
                        }
                    }
                }
            }
        },
        "/api/deployment-targets/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Fetches a single DeploymentTarget",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DeploymentTargets"
                ],
                "summary": "Get DeploymentTarget",
                "parameters": [
                    {
                        "type": "string",
                        "description": "DeploymentTarget ID (must be valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.DeploymentTarget"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Deprecated, use PATCH /api/deployment-targets/{id} instead",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DeploymentTargets"
                ],
                "summary": "Update DeploymentTarget",
                "deprecated": true,
                "parameters": [
                    {
                        "type": "string",
                        "description": "DeploymentTarget ID (must be valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Object with partial update fields (name)",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.UpdateDeploymentTargetRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "The updated DeploymentTarget will be returned",
                        "schema": {
                            "$ref": "#/definitions/models.DeploymentTarget"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Deletes a single DeploymentTarget.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DeploymentTargets"
                ],
                "summary": "Delete DeploymentTarget",
                "parameters": [
                    {
                        "type": "string",
                        "description": "DeploymentTarget ID (must be valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "DeploymentTarget has been deleted."
                    },
                    "409": {
                        "description": "Delete failed due to some constraints. Check error for more details."
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Patches existing DeploymentTarget",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DeploymentTargets"
                ],
                "summary": "Patch DeploymentTarget",
                "parameters": [
                    {
                        "type": "string",
                        "description": "DeploymentTarget ID (must be valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Object with partial update fields (name, tlsRequired, tlsIssuer)",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.PatchDeploymentTargetRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The patched DeploymentTarget will be returned",
                        "schema": {
                            "$ref": "#/definitions/models.DeploymentTarget"
                        }
                    }
                }
            }
        },
        "/api/deployment-targets/{id}/agent-metadata": {
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Patches the DeploymentTarget agent-metadata",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DeploymentTargets"
                ],
                "summary": "Patch DeploymentTarget agent-metadata",
                "parameters": [
                    {
                        "type": "string",
                        "description": "DeploymentTarget ID (must be valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Object with target cluster ID",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.PatchDeploymentTargetsAgentMetadataRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/api/deployment-targets/{id}/config": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Fetches the config values for a DeploymentTarget",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DeploymentTargets"
                ],
                "summary": "Get configuration values for a DeploymentTarget",
                "parameters": [
                    {
                        "type": "string",
                        "description": "DeploymentTarget ID (must be valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controllers.TargetClusterConfigResponse"
                        }
                    }
                }
            }
        },
        "/api/deployment-targets/{id}/credentials": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Deprecated, use GET /api/deployment-targets/{id}/config instead",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DeploymentTargets"
                ],
                "summary": "Get join credentials of a DeploymentTarget",
                "deprecated": true,
                "parameters": [
                    {
                        "type": "string",
                        "description": "DeploymentTarget ID (must be valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controllers.DeploymentTargetCredentialsResponse"
                        }
                    }
                }
            }
        },
        "/api/deployment-targets/{id}/heartbeat": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Makes control plane aware that DeploymentTarget is still alive",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DeploymentTargets"
                ],
                "summary": "Make DeploymentTarget heart beat request",
                "parameters": [
                    {
                        "type": "string",
                        "description": "DeploymentTarget ID (must be valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Object with target cluster ID",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.DeploymentTargetHeartbeatRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Object with heart beat response",
                        "schema": {
                            "$ref": "#/definitions/controllers.DeploymentTargetHeartbeatResponse"
                        }
                    }
                }
            }
        },
        "/api/deployment-targets/{id}/metadata": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Handles DeploymentTarget metadata created by PDS/Platform agent\nDeprecated, Use PATCH api/deployment-targets/{id}/agent-metadata instead",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DeploymentTargets"
                ],
                "summary": "Update DeploymentTarget metadata",
                "deprecated": true,
                "parameters": [
                    {
                        "type": "string",
                        "description": "DeploymentTarget ID (must be valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Object with target cluster ID",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.DeploymentTargetMetadataRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/api/deployment-targets/{id}/namespaces": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "List DeploymentTarget's Namespaces",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Namespaces"
                ],
                "summary": "List DeploymentTarget's Namespaces",
                "parameters": [
                    {
                        "type": "string",
                        "description": "DeploymentTarget ID (must be valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "A given Namespace attribute to sort results by (one of: id, name, created_at)",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Maximum number of rows to return (could be less)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Use a token returned by a previous query to continue listing with the next batch of rows",
                        "name": "continuation",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter results by Namespace ID",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter results by Namespace name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter results by Namespace status",
                        "name": "status",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.PaginatedResult-models_Namespace"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Creates a new Namespace",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Namespaces"
                ],
                "summary": "Create Namespace",
                "parameters": [
                    {
                        "type": "string",
                        "description": "DeploymentTarget ID (must be valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Request body containing the new namespace",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.createNamespace"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The created Namespace will be returned",
                        "schema": {
                            "$ref": "#/definitions/models.Namespace"
                        }
                    },
                    "400": {
                        "description": "Bad request, see response for more details"
                    },
                    "409": {
                        "description": "Namespace with the given name already exists"
                    }
                }
            }
        },
        "/api/deployment-targets/{id}/operator-heartbeat": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Makes control plane aware that DeploymentTarget's operator is still alive",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DeploymentTargets"
                ],
                "summary": "Make DeploymentTarget operator heart beat request",
                "parameters": [
                    {
                        "type": "string",
                        "description": "DeploymentTarget ID (must be valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Object with target cluster ID",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.DeploymentTargetHeartbeatRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Object with heart beat response",
                        "schema": {
                            "$ref": "#/definitions/controllers.DeploymentTargetHeartbeatResponse"
                        }
                    }
                }
            }
        },
        "/api/deployment-targets/{id}/operator-metadata": {
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Handles DeploymentTarget metadata created by target operator",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DeploymentTargets"
                ],
                "summary": "Update target operator metadata",
                "parameters": [
                    {
                        "type": "string",
                        "description": "DeploymentTarget ID (must be valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Body with the new metadata.",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.UpdateOperatorMetadataRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/api/deployment-targets/{id}/update-capabilities": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Updates the set of capabilities supported by the deployment target",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DeploymentTargets"
                ],
                "summary": "Update target capabilities",
                "parameters": [
                    {
                        "type": "string",
                        "description": "DeploymentTarget ID (must be valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Body containing supported capabilities versions (must be valid semver).",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.DeploymentTargetCapabilities"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/api/deployments/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Fetches a data service Deployment",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Deployments"
                ],
                "summary": "Get Deployment",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Deployment ID (either id or deployment_id field)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Expand the result with related entities (allowed values: deployment_target, namespace)",
                        "name": "expand",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Deployment"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Updates an existing database Deployment",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Deployments"
                ],
                "summary": "Update Deployment",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Deployment ID (must be valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "description": "Set to true to only update the Deployment object in the database (does not create any actual resources)",
                        "name": "Local-Only",
                        "in": "header"
                    },
                    {
                        "description": "Request body containing the updated deployment config",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.UpdateDeploymentRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "The updated Deployment will be returned",
                        "schema": {
                            "$ref": "#/definitions/models.Deployment"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Deletes an existing database Deployment",
                "tags": [
                    "Deployments"
                ],
                "summary": "Delete Deployment",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Deployment ID (must be a valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Delete deployment even if the deletion job fails on any deployment targets",
                        "name": "force",
                        "in": "query"
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted"
                    }
                }
            }
        },
        "/api/deployments/{id}/backups": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Lists Backups belonging to the Deployment.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Backups"
                ],
                "summary": "List Deployment's Backups",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Deployment ID (must be valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "A given Backup attribute to sort results by (one of: id, cluster_resource_name, created_at, backup_type, backup_level)",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Maximum number of rows to return (could be less)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Use a token returned by a previous query to continue listing with the next batch of rows",
                        "name": "continuation",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter results by Backup id",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter results by Backup cluster_resource_name",
                        "name": "cluster_resource_name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter results by Backup state",
                        "name": "state",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter results by Backup suspend flag",
                        "name": "suspend",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter results by Backup type (one of: adhoc,scheduled)",
                        "name": "backup_type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter results by Backup type (one of: snapshot,incremental)",
                        "name": "backup_level",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.PaginatedResult-models_Backup"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Creates a new database Backup",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Backups"
                ],
                "summary": "Create Backup",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Deployment ID (must be valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "description": "Set to true to only create the Backup object in the database (does not create any actual resources)",
                        "name": "Local-Only",
                        "in": "header"
                    },
                    {
                        "description": "Request body containing the backup config",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.CreateDeploymentBackup"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "The created Backup will be returned",
                        "schema": {
                            "$ref": "#/definitions/models.Backup"
                        }
                    }
                }
            }
        },
        "/api/deployments/{id}/connection-info": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns connection information for the given Deployment",
                "tags": [
                    "Deployments"
                ],
                "summary": "Deployment Connection Information",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Deployment ID (must be valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/deployments.ConnectionInfo"
                        }
                    }
                }
            }
        },
        "/api/deployments/{id}/credentials": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns credentials to authenticate to the given Deployment",
                "tags": [
                    "Deployments"
                ],
                "summary": "Deployment Credentials",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Deployment ID (must be valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/deployments.Credentials"
                        }
                    }
                }
            }
        },
        "/api/deployments/{id}/events": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves events of the given Deployment",
                "tags": [
                    "Deployments"
                ],
                "summary": "Get Deployment Events",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Deployment ID (must be valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/service.DeploymentResourceEvents"
                        }
                    }
                }
            }
        },
        "/api/deployments/{id}/status": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves status information on the given Deployment",
                "tags": [
                    "Deployments"
                ],
                "summary": "Get Deployment Status",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Deployment ID (must be valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/service.DeploymentStatus"
                        }
                    }
                }
            }
        },
        "/api/deployments/{id}/update-manifest": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Upsert On Deployment Manifest\nAlways returns the record with higher timestamp with given DeploymentID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DeploymentManifests"
                ],
                "summary": "Post DeploymentManifest",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Deployment ID (must be valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Body with the Deployment Manifest",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.UpsertDeploymentManifestRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/api/global-role-bindings": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Lists GlobalRoleBindings",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "GlobalRoleBindings"
                ],
                "summary": "List GlobalRoleBindings",
                "parameters": [
                    {
                        "type": "string",
                        "description": "A given GlobalRoleBinding attribute to sort results by (one of: role_name, actor_id)",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter results by GlobalRoleBinding assigned role name",
                        "name": "role_name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter results by GlobalRoleBinding actor id",
                        "name": "actor_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter results by GlobalRoleBinding actor type",
                        "name": "actor_type",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controllers.PaginatedGlobalRoleBindings"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Creates a new GlobalRoleBinding",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "GlobalRoleBindings"
                ],
                "summary": "Set GlobalRoleBinding",
                "parameters": [
                    {
                        "description": "Request body containing the global role binding",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.GlobalRoleBinding"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The created GlobalRoleBinding will be returned",
                        "schema": {
                            "$ref": "#/definitions/models.GlobalRoleBinding"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Removes a single GlobalRoleBindings",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "GlobalRoleBindings"
                ],
                "summary": "Delete GlobalRoleBinding",
                "parameters": [
                    {
                        "description": "Request body containing the global role binding",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.DeleteRoleBindingRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/api/images": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Lists Images",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Images"
                ],
                "summary": "List Images",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter results by data_service_id",
                        "name": "data_service_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter results by version_id",
                        "name": "version_id",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Only include the latest image for each version_id.",
                        "name": "latest",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "A given Image attribute to sort results by (one of: id, name, created_at). Ignored when latest=true.",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Maximum number of rows to return (could be less). Ignored when latest=true.",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Use a token returned by a previous query to continue listing with the next batch of rows. Ignored when latest=true.",
                        "name": "continuation",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.PaginatedResult-models_Image"
                        }
                    }
                }
            }
        },
        "/api/images/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Fetches a single Image",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Images"
                ],
                "summary": "Get Image",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Image ID (must be valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Image"
                        }
                    }
                }
            }
        },
        "/api/metadata": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get metadata about this server",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Metadata"
                ],
                "summary": "Get metadata information",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controllers.APIMetadataResponse"
                        }
                    }
                }
            }
        },
        "/api/namespaces/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Fetches a single Namespace",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Namespaces"
                ],
                "summary": "Get Namespace",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Namespace ID (must be valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Namespace"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Update namespace",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Namespaces"
                ],
                "summary": "Update namespace",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Namespace ID (must be valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Object with partial update of fields (status)",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.UpdateNamespaceRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "The updated Namespace will be returned",
                        "schema": {
                            "$ref": "#/definitions/models.Namespace"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Deletes a single Namespace.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Namespaces"
                ],
                "summary": "Delete Namespace",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Namespace ID (must be valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Namespace has been deleted."
                    },
                    "409": {
                        "description": "Delete failed due to some constraints. Check error for more details."
                    }
                }
            }
        },
        "/api/projects/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Fetches a single Project",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Projects"
                ],
                "summary": "Get Project",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Project ID (must be valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Project"
                        }
                    }
                }
            }
        },
        "/api/projects/{id}/backup-targets": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Lists BackupTargets belonging to the Project",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "BackupTargets"
                ],
                "summary": "List Project's BackupTargets",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Project ID (must be valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "A given BackupTarget attribute to sort results by (one of: id, name, type, created_at)",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Maximum number of rows to return (could be less)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Use a token returned by a previous query to continue listing with the next batch of rows",
                        "name": "continuation",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter results by BackupTarget ID",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter results by BackupTarget name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter results by BackupTarget type",
                        "name": "type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter results by bucket",
                        "name": "bucket",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter results by region",
                        "name": "region",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter results by deployment ID where the backup target is available.",
                        "name": "deployment_target_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter results by BackupCredentials ID",
                        "name": "backup_credentials_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.PaginatedResult-models_BackupTarget"
                        }
                    }
                }
            }
        },
        "/api/projects/{id}/deployment-targets": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Lists DeploymentTargets belonging to the Project",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DeploymentTargets"
                ],
                "summary": "List Project's DeploymentTargets",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Project ID (must be valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "A given DeploymentTarget attribute to sort results by (one of: id, name)",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Maximum number of rows to return (could be less)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Use a token returned by a previous query to continue listing with the next batch of rows",
                        "name": "continuation",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter results by DeploymentTarget ID",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter results by Cluster ID",
                        "name": "cluster_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter results by DeploymentTarget name",
                        "name": "name",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.PaginatedResult-models_DeploymentTarget"
                        }
                    }
                }
            }
        },
        "/api/projects/{id}/deployments": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Lists Deployments belonging to the Project.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Deployments"
                ],
                "summary": "List Project's Deployments",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Project ID (must be valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Expand the result with related entities (allowed values: deployment_target, namespace)",
                        "name": "expand",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "A given Deployment attribute to sort results by (one of: id, name, cluster_resource_name, created_at)",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Maximum number of rows to return (could be less)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Use a token returned by a previous query to continue listing with the next batch of rows",
                        "name": "continuation",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter results by Deployment id",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter results by Deployment cluster_resource_name",
                        "name": "cluster_resource_name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter results by Deployment data_service_id",
                        "name": "data_service_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter results by Deployment deployment_target_id",
                        "name": "deployment_target_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter results by Deployment image_id",
                        "name": "image_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter results by Deployment name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter results by Deployment namespace_id",
                        "name": "namespace_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter results by Deployment state",
                        "name": "state",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.PaginatedResult-models_Deployment"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Creates a new data service Deployment",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Deployments"
                ],
                "summary": "Create Deployment",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Project ID (must be valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "description": "Set to true to only create the Deployment object in the database (does not create any actual resources)",
                        "name": "Local-Only",
                        "in": "header"
                    },
                    {
                        "description": "Request body containing the deployment config",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.CreateProjectDeploymentRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "The created Deployment will be returned",
                        "schema": {
                            "$ref": "#/definitions/models.Deployment"
                        }
                    }
                }
            }
        },
        "/api/projects/{id}/role-bindings": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Lists ProjectRoleBindings",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ProjectRoleBindings"
                ],
                "summary": "List ProjectRoleBindings",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Project ID (must be valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "A given ProjectRoleBinding attribute to sort results by (one of: role_name, actor_id)",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter results by ProjectRoleBinding assigned role name",
                        "name": "role_name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter results by ProjectRoleBinding actor id",
                        "name": "actor_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter results by ProjectRoleBinding actor type",
                        "name": "actor_type",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controllers.PaginatedProjectRoleBindings"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Creates a new ProjectRoleBinding",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ProjectRoleBindings"
                ],
                "summary": "Create ProjectRoleBinding",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Project ID (must be valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Request body containing the project role binding",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.upsertProjectRoleBindingRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The created ProjectRoleBinding will be returned",
                        "schema": {
                            "$ref": "#/definitions/models.ProjectRoleBinding"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Removes a single ProjectRoleBinding",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "ProjectRoleBindings"
                ],
                "summary": "Delete ProjectRoleBinding",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Project ID (must be valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Request body containing the project role binding",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.DeleteRoleBindingRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/api/resource-settings-templates/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Fetches a single ResourceSettingsTemplate",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ResourceSettingsTemplates"
                ],
                "summary": "Get ResourceSettingsTemplate",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ResourceSettingsTemplate ID (must be valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ResourceSettingsTemplate"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Updates existing ResourceSettingsTemplate",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ResourceSettingsTemplates"
                ],
                "summary": "Update ResourceSettingsTemplate",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ResourceSettingsTemplate ID (must be valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Request body containing updated template",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.UpdateResourceSettingsTemplateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The updated resource settings template will be returned",
                        "schema": {
                            "$ref": "#/definitions/models.ResourceSettingsTemplate"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Removes a single ResourceSettingsTemplate",
                "tags": [
                    "ResourceSettingsTemplates"
                ],
                "summary": "Delete ResourceSettingsTemplates",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ResourceSettingsTemplate ID (must be valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/api/restores/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Fetches a Restore",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Restores"
                ],
                "summary": "Get Restore",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Restore ID (must be valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Restore"
                        }
                    }
                }
            }
        },
        "/api/restores/{id}/update-status": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Updates a Restore Status",
                "tags": [
                    "Restores"
                ],
                "summary": "Update Restore Status",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Restore ID (must be valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Request body containing the status update",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.UpdateRestoreStatusRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Restore"
                        }
                    }
                }
            }
        },
        "/api/roles": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Fetches list of supported Roles",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Roles"
                ],
                "summary": "List Roles",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controllers.PaginatedRoles"
                        }
                    }
                }
            }
        },
        "/api/service-accounts/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Fetches a single ServiceAccount (will be replaced by service level API keys)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ServiceAccounts"
                ],
                "summary": "Get ServiceAccounts",
                "deprecated": true,
                "parameters": [
                    {
                        "type": "string",
                        "description": "ServiceAccount ID (must be valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controllers.ServiceAccountResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Removes a single ServiceAccount (will be replaced by service level API keys)",
                "tags": [
                    "ServiceAccounts"
                ],
                "summary": "Delete ServiceAccounts",
                "deprecated": true,
                "parameters": [
                    {
                        "type": "string",
                        "description": "ServiceAccount ID (must be valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/api/service-accounts/{id}/token": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Fetches the token of a ServiceAccount (will be replaced by service level API keys)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ServiceAccounts"
                ],
                "summary": "Get token of a ServiceAccount",
                "deprecated": true,
                "parameters": [
                    {
                        "type": "string",
                        "description": "ServiceAccount ID (must be valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controllers.ServiceAccountTokenResponse"
                        }
                    }
                }
            }
        },
        "/api/storage-options-templates/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Fetches a single StorageOptionsTemplate",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "StorageOptionsTemplates"
                ],
                "summary": "Get StorageOptionsTemplate",
                "parameters": [
                    {
                        "type": "string",
                        "description": "StorageOptionsTemplate ID (must be valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.StorageOptionsTemplate"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Updates existing StorageOptionsTemplate",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "StorageOptionsTemplates"
                ],
                "summary": "Update StorageOptionsTemplate",
                "parameters": [
                    {
                        "type": "string",
                        "description": "StorageOptionsTemplate ID (must be valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Request body containing updated template",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.UpdateStorageOptionsTemplateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The updated storage options template will be returned",
                        "schema": {
                            "$ref": "#/definitions/models.StorageOptionsTemplate"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Removes a single StorageOptionsTemplate",
                "tags": [
                    "StorageOptionsTemplates"
                ],
                "summary": "Delete StorageOptionsTemplates",
                "parameters": [
                    {
                        "type": "string",
                        "description": "StorageOptionsTemplate ID (must be valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/api/teams/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Fetches a single Team",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Teams"
                ],
                "summary": "Get Team",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Team ID (must be valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Team"
                        }
                    }
                }
            }
        },
        "/api/tenants/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Fetches a single Tenant",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tenants"
                ],
                "summary": "Get Tenant",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Tenant ID (must be valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Tenant"
                        }
                    }
                }
            }
        },
        "/api/tenants/{id}/application-configuration-templates": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Lists ApplicationConfigurationTemplates",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ApplicationConfigurationTemplates"
                ],
                "summary": "List ApplicationConfigurationTemplates",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Tenant ID (must be valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "A given ApplicationConfigurationTemplates attribute to sort results by (one of: id, name, created_at)",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Maximum number of rows to return (could be less)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Use a token returned by a previous query to continue listing with the next batch of rows",
                        "name": "continuation",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter results by ApplicationConfigurationTemplates id",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter results by ApplicationConfigurationTemplates name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter results by DataService ID",
                        "name": "data_service_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.PaginatedResult-models_ApplicationConfigurationTemplate"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Creates a new ApplicationConfigurationTemplate",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ApplicationConfigurationTemplates"
                ],
                "summary": "Create ApplicationConfigurationTemplate",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Tenant ID (must be valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Request body containing the application configuration template",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.createApplicationConfigurationTemplateRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "The created ApplicationConfigurationTemplate will be returned",
                        "schema": {
                            "$ref": "#/definitions/models.ApplicationConfigurationTemplate"
                        }
                    }
                }
            }
        },
        "/api/tenants/{id}/backup-credentials": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Lists BackupCredentials visible to the caller",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "BackupCredentials"
                ],
                "summary": "List BackupCredentials",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Tenant ID (must be valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "A given BackupCredentials attribute to sort results by (one of: id, name, created_at)",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Maximum number of rows to return (could be less)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Use a token returned by a previous query to continue listing with the next batch of rows",
                        "name": "continuation",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter results by BackupCredentials id",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter results by BackupCredentials name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter results by BackupCredentials type",
                        "name": "type",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.PaginatedResult-models_BackupCredentials"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Creates a new BackupCredentials",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "BackupCredentials"
                ],
                "summary": "Create BackupCredentials",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Tenant ID (must be valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Request body containing the backup credentials config",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.createBackupCredentialsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The created BackupCredentials will be returned",
                        "schema": {
                            "$ref": "#/definitions/models.BackupCredentials"
                        }
                    }
                }
            }
        },
        "/api/tenants/{id}/backup-policies": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Lists BackupPolicies",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "BackupPolicies"
                ],
                "summary": "List BackupPolicies",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Tenant ID (must be valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "A given BackupPolicy attribute to sort results by (one of: id, name, created_at)",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Maximum number of rows to return (could be less)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Use a token returned by a previous query to continue listing with the next batch of rows",
                        "name": "continuation",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter results by BackupPolicy id",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter results by BackupPolicy name",
                        "name": "name",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.PaginatedResult-models_BackupPolicy"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Creates a new BackupPolicy",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "BackupPolicies"
                ],
                "summary": "Create BackupPolicy",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Tenant ID (must be valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Request body containing the backup policy",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.createBackupPolicyRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "The created BackupPolicy will be returned",
                        "schema": {
                            "$ref": "#/definitions/models.BackupPolicy"
                        }
                    }
                }
            }
        },
        "/api/tenants/{id}/backup-targets": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Lists Tenant's BackupTargets",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "BackupTargets"
                ],
                "summary": "List Tenant's BackupTargets",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Tenant ID (must be valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Maximum number of rows to return (could be less)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Use a token returned by a previous query to continue listing with the next batch of rows",
                        "name": "continuation",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "A given BackupTarget attribute to sort results by (one of: id, name, type, created_at)",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter results by BackupTarget ID",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter results by BackupTarget name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter results by BackupTarget type",
                        "name": "type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter results by bucket",
                        "name": "bucket",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter results by region",
                        "name": "region",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter results by BackupCredentials ID",
                        "name": "backup_credentials_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.PaginatedResult-models_BackupTarget"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Creates a new BackupTarget",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "BackupTargets"
                ],
                "summary": "Create BackupTarget",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Tenant ID (must be valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Request body containing the backup target config",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.CreateTenantBackupTarget"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "The created BackupTarget will be returned",
                        "schema": {
                            "$ref": "#/definitions/models.BackupTarget"
                        }
                    }
                }
            }
        },
        "/api/tenants/{id}/deployment-targets": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Lists Tenant's DeploymentTargets",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DeploymentTargets"
                ],
                "summary": "List Tenant's DeploymentTargets",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Tenant ID (must be valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "A given DeploymentTarget attribute to sort results by (one of: id, name, created_at)",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Maximum number of rows to return (could be less)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Use a token returned by a previous query to continue listing with the next batch of rows",
                        "name": "continuation",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter results by DeploymentTarget ID",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter results by Cluster ID",
                        "name": "cluster_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter results by DeploymentTarget name",
                        "name": "name",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.PaginatedResult-models_DeploymentTarget"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Creates a new DeploymentTarget",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DeploymentTargets"
                ],
                "summary": "Create DeploymentTarget",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Tenant ID (must be valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Request body containing the deployment target config",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.CreateDeploymentTargetRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "The created DeploymentTarget will be returned",
                        "schema": {
                            "$ref": "#/definitions/models.DeploymentTarget"
                        }
                    }
                }
            }
        },
        "/api/tenants/{id}/dns-details": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get DNS details/credentials for Tenant",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tenants"
                ],
                "summary": "Get DNS details for Tenant",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Tenant ID (must be valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.DNSDetails"
                        }
                    }
                }
            }
        },
        "/api/tenants/{id}/projects": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Lists Projects belonging to the Tenant.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Projects"
                ],
                "summary": "List Tenant's Projects",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Tenant ID (must be valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "A given Project attribute to sort results by (one of: id, name, created_at)",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Maximum number of rows to return (could be less)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Use a token returned by a previous query to continue listing with the next batch of rows",
                        "name": "continuation",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter results by Project id",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter results by Project name",
                        "name": "name",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.PaginatedResult-models_Project"
                        }
                    }
                }
            }
        },
        "/api/tenants/{id}/resource-settings-templates": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Lists ResourceSettingsTemplates",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ResourceSettingsTemplates"
                ],
                "summary": "List ResourceSettingsTemplates",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Tenant ID (must be valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "A given ResourceSettingsTemplates attribute to sort results by (one of: id, name, created_at)",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Maximum number of rows to return (could be less)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Use a token returned by a previous query to continue listing with the next batch of rows",
                        "name": "continuation",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter results by ResourceSettingsTemplates id",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter results by ResourceSettingsTemplates name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter results by DataService ID",
                        "name": "data_service_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.PaginatedResult-models_ResourceSettingsTemplate"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Creates a new ResourceSettingsTemplate",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ResourceSettingsTemplates"
                ],
                "summary": "Create ResourceSettingsTemplate",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Tenant ID (must be valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Request body containing the resource settings template",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.createResourceSettingsTemplateRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "The created ResourceSettingsTemplate will be returned",
                        "schema": {
                            "$ref": "#/definitions/models.ResourceSettingsTemplate"
                        }
                    }
                }
            }
        },
        "/api/tenants/{id}/role-bindings": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Lists TenantRoleBindings",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "TenantRoleBindings"
                ],
                "summary": "List TenantRoleBindings",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Tenant ID (must be valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "A given TenantRoleBinding attribute to sort results by (one of: role_name, actor_id)",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter results by TenantRoleBinding assigned role name",
                        "name": "role_name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter results by TenantRoleBinding actor id",
                        "name": "actor_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter results by TenantRoleBinding actor type",
                        "name": "actor_type",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controllers.PaginatedTenantRoleBindings"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Creates a new TenantRoleBinding",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "TenantRoleBindings"
                ],
                "summary": "Create TenantRoleBinding",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Tenant ID (must be valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Request body containing the tenant role binding",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.upsertTenantRoleBindingRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The created TenantRoleBinding will be returned",
                        "schema": {
                            "$ref": "#/definitions/models.TenantRoleBinding"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Removes a single TenantRoleBinding",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "TenantRoleBindings"
                ],
                "summary": "Delete TenantRoleBinding",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Tenant ID (must be valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Request body containing the tenant role binding",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.DeleteRoleBindingRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/api/tenants/{id}/service-accounts": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "List Tenant's ServiceAccounts (will be replaced by service level API keys)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ServiceAccounts"
                ],
                "summary": "List Tenant's ServiceAccounts",
                "deprecated": true,
                "parameters": [
                    {
                        "type": "string",
                        "description": "Tenant ID (must be valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "A given ServiceAccount attribute to sort results by (one of: name, id, created_at)",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Maximum number of rows to return (could be less)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Use a token returned by a previous query to continue listing with the next batch of rows",
                        "name": "continuation",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter results by ServiceAccount name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter results by ServiceAccount id",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter results by ServiceAccount token",
                        "name": "token",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.PaginatedResult-models_ServiceAccount"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Creates a new ServiceAccount (will be replaced by service level API keys)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ServiceAccounts"
                ],
                "summary": "Create ServiceAccounts",
                "deprecated": true,
                "parameters": [
                    {
                        "type": "string",
                        "description": "Tenant ID (must be valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Request body containing name of the service account",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.createServiceAccountRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The created ServiceAccount will be returned",
                        "schema": {
                            "$ref": "#/definitions/models.ServiceAccount"
                        }
                    }
                }
            }
        },
        "/api/tenants/{id}/storage-options-templates": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Lists StorageOptionsTemplates",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "StorageOptionsTemplates"
                ],
                "summary": "List StorageOptionsTemplates",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Tenant ID (must be valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "A given StorageOptionsTemplates attribute to sort results by (one of: id, name, created_at)",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Maximum number of rows to return (could be less)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Use a token returned by a previous query to continue listing with the next batch of rows",
                        "name": "continuation",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter results by StorageOptionsTemplates id",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter results by StorageOptionsTemplates name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "enum": [
                                "pxd.portworx.com",
                                "kubernetes.io/portworx-volume",
                                "auto"
                            ],
                            "type": "string"
                        },
                        "description": "Filter results by StorageOptionsTemplates provisioner",
                        "name": "provisioner",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.PaginatedResult-models_StorageOptionsTemplate"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Creates a new StorageOptionsTemplate",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "StorageOptionsTemplates"
                ],
                "summary": "Create StorageOptionsTemplate",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Tenant ID (must be valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Request body containing the storage options template",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.createStorageOptionsTemplateRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "The created StorageOptionsTemplates will be returned",
                        "schema": {
                            "$ref": "#/definitions/models.StorageOptionsTemplate"
                        }
                    }
                }
            }
        },
        "/api/user-api-key": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Lists UserAPIKeys",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "UserAPIKey"
                ],
                "summary": "List UserAPIKeys",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter results by id",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter results by name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Filter results by enabled",
                        "name": "enabled",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "A given UserAPIKey attribute to sort results by (one of: id, name, created_at, enabled, expires_at)",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Maximum number of rows to return (could be less)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Use a token returned by a previous query to continue listing with the next batch of rows",
                        "name": "continuation",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.PaginatedResult-models_UserAPIKey"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Creates a UserAPIKey",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "UserAPIKey"
                ],
                "summary": "Create UserAPIKey",
                "parameters": [
                    {
                        "description": "Request body containing the necessary information to create a key.",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.CreateUserAPIKeyRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.UserAPIKey"
                        }
                    }
                }
            }
        },
        "/api/user-api-key/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Gets a UserAPIKey",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "UserAPIKey"
                ],
                "summary": "Get UserAPIKey",
                "parameters": [
                    {
                        "type": "string",
                        "description": "UserAPIKey ID (must be valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.UserAPIKey"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Deletes the UserAPIKey if it's disabled. Returns 422 if the UserAPIKey is enabled.",
                "tags": [
                    "UserAPIKey"
                ],
                "summary": "Delete UserAPIKey",
                "parameters": [
                    {
                        "type": "string",
                        "description": "UserAPIKey ID (must be valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Patches the Name and Enabled properties of a UserAPIKey",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "UserAPIKey"
                ],
                "summary": "Patch UserAPIKey",
                "parameters": [
                    {
                        "type": "string",
                        "description": "UserAPIKey ID (must be valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Request body containing the new values.",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.PatchUserAPIKeyRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/api/users/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Fetches a single User",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get User",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID (must be valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    }
                }
            }
        },
        "/api/users/{id}/account-role-bindings": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Lists the AccountRoleBindings of a User.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AccountRoleBindings"
                ],
                "summary": "List User's AccountRoleBindings",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID (must be valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "A given AccountRoleBinding attribute to sort results by (allowed: role_name)",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter results by role_name",
                        "name": "role_name",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controllers.PaginatedAccountRoleBindings"
                        }
                    }
                }
            }
        },
        "/api/version": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get version information about this server",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "APIVersion"
                ],
                "summary": "Get version information",
                "deprecated": true,
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controllers.APIVersionResponse"
                        }
                    }
                }
            }
        },
        "/api/versions/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Fetches a single Version",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Versions"
                ],
                "summary": "Get Version",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Version ID (must be valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Version"
                        }
                    }
                }
            }
        },
        "/api/versions/{id}/images": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Lists Images belonging to a Version.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Images"
                ],
                "summary": "List Version's Images",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Version ID (must be valid UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "A given Image attribute to sort results by (one of: id, name, created_at)",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Maximum number of rows to return (could be less)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Use a token returned by a previous query to continue listing with the next batch of rows",
                        "name": "continuation",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter results by Image id",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter results by Image's name",
                        "name": "name",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.PaginatedResult-models_Image"
                        }
                    }
                }
            }
        },
        "/api/whoami": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Fetches a details of the current calling actor (user or service account)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "WhoAmI"
                ],
                "summary": "Get Current Actor",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controllers.WhoAmIResponse"
                        }
                    }
                }
            }
        },
        "/auth/authorization-code": {
            "post": {
                "description": "Exchanges the Authorization Code from the OAuth2 server for an ID Token which is necessary for user authentication using the Authorization HTTP header.\n\n**Authenticating for later requests using the ID token:**\n`Authorization: Bearer {id_token}`",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Authorization code exchange",
                "parameters": [
                    {
                        "description": "Request body containing the received authorization code.",
                        "name": "Body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.AuthorizationCodeRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controllers.OIDCTokenResponse"
                        }
                    },
                    "400": {
                        "description": "The submitted request body isn't valid."
                    },
                    "401": {
                        "description": "The token exchange failed."
                    }
                }
            }
        },
        "/auth/oidc-info": {
            "get": {
                "description": "Returns OIDC configuration for the frontend.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "OIDC info",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controllers.OIDCInfoResponse"
                        }
                    },
                    "404": {
                        "description": "OIDC is not enabled in the configuration of API server."
                    }
                }
            }
        },
        "/auth/refresh-token": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Use refresh token to generate new tokens.",
                "parameters": [
                    {
                        "description": "Request body containing the refresh token.",
                        "name": "Body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.RefreshTokenRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controllers.OIDCTokenResponse"
                        }
                    },
                    "400": {
                        "description": "The submitted request body isn't valid."
                    },
                    "401": {
                        "description": "The token refresh failed."
                    }
                }
            }
        }
    },
    "definitions": {
        "auth.Claims": {
            "type": "object",
            "properties": {
                "aud": {
                    "description": "Audience is the intended recipient of the token.",
                    "type": "string"
                },
                "email": {
                    "description": "Email of this account.",
                    "type": "string"
                },
                "groups": {
                    "description": "(optional) Groups in which this account is part of.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "iss": {
                    "description": "Issuer is the token issuer. For self-signed token do not prefix with `https://`.",
                    "type": "string"
                },
                "name": {
                    "description": "Name of this account.",
                    "type": "string"
                },
                "roles": {
                    "description": "Roles of this account.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "sub": {
                    "description": "Subject identifier. Unique ID of this account.",
                    "type": "string"
                }
            }
        },
        "compatibility.CompatibleVersion": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "ID of a Version entity.",
                    "type": "string"
                },
                "name": {
                    "description": "Name of a Version entity.",
                    "type": "string"
                }
            }
        },
        "compatibility.CompatibleVersions": {
            "type": "object",
            "properties": {
                "compatible": {
                    "description": "Compatible contains all compatible versions.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/compatibility.CompatibleVersion"
                    }
                },
                "data_service_id": {
                    "type": "string"
                },
                "data_service_name": {
                    "type": "string"
                },
                "latest_compatible": {
                    "description": "LatestCompatible contains the latest patch versions of compatible major/minor versions.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/compatibility.CompatibleVersion"
                    }
                },
                "latest_compatible_patch": {
                    "description": "LatestCompatiblePatch contains the highest compatible version that only increases the patch version.",
                    "$ref": "#/definitions/compatibility.CompatibleVersion"
                },
                "version_id": {
                    "type": "string"
                },
                "version_name": {
                    "type": "string"
                }
            }
        },
        "constraint.Pagination": {
            "type": "object",
            "properties": {
                "continuation": {
                    "type": "string"
                }
            }
        },
        "controllers.APIMetadataResponse": {
            "type": "object",
            "properties": {
                "features": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "helm_chart_version": {
                    "type": "string",
                    "example": "Helm chart version"
                },
                "pds_build_number": {
                    "type": "integer"
                }
            }
        },
        "controllers.APIVersionResponse": {
            "type": "object",
            "properties": {
                "api_version": {
                    "type": "string",
                    "example": "API server version"
                },
                "features": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "helm_chart_version": {
                    "type": "string",
                    "example": "Helm chart version"
                },
                "pds_build_number": {
                    "type": "integer"
                }
            }
        },
        "controllers.ApplicationConfigurationSamples": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ApplicationConfigurationSample"
                    }
                }
            }
        },
        "controllers.AuthorizationCodeRequest": {
            "type": "object",
            "properties": {
                "AuthCode": {
                    "type": "string"
                }
            }
        },
        "controllers.BackupJobStatus": {
            "type": "object",
            "properties": {
                "completion_time": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "start_time": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "controllers.BackupJobsResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/controllers.BackupJobStatus"
                    }
                }
            }
        },
        "controllers.BackupPolicySamples": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.BackupPolicySample"
                    }
                }
            }
        },
        "controllers.CompatibleVersionsResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/compatibility.CompatibleVersions"
                    }
                }
            }
        },
        "controllers.CreateDeploymentBackup": {
            "type": "object",
            "properties": {
                "backup_level": {
                    "type": "string",
                    "example": "snapshot or incremental"
                },
                "backup_target_id": {
                    "type": "string"
                },
                "backup_type": {
                    "type": "string",
                    "example": "adhoc or scheduled"
                },
                "job_history_limit": {
                    "type": "integer"
                },
                "schedule": {
                    "type": "string",
                    "example": "in CRON format, required for scheduled backups"
                }
            }
        },
        "controllers.CreateTenantBackupTarget": {
            "type": "object",
            "properties": {
                "backup_credentials_id": {
                    "type": "string"
                },
                "bucket": {
                    "description": "Bucket name for S3 or S3 compatible. Container name for Azure.",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the backup target. Must be unique for the given tenant.",
                    "type": "string"
                },
                "region": {
                    "description": "Region of the bucket. Required for S3. Otherwise must be empty.",
                    "type": "string"
                },
                "type": {
                    "description": "Type of the backup target. Must match the used backup credentials.",
                    "type": "string"
                }
            }
        },
        "controllers.Credentials": {
            "type": "object",
            "properties": {
                "azure": {
                    "$ref": "#/definitions/models.AzureCredentials"
                },
                "google": {
                    "$ref": "#/definitions/models.GoogleCredentials"
                },
                "s3": {
                    "$ref": "#/definitions/models.S3Credentials"
                },
                "s3_compatible": {
                    "$ref": "#/definitions/models.S3CompatibleCredentials"
                }
            }
        },
        "controllers.DeploymentTargetCredentialsResponse": {
            "type": "object",
            "properties": {
                "teleport_ca_pin": {
                    "type": "string"
                },
                "teleport_join_token": {
                    "type": "string"
                },
                "teleport_proxy_addr": {
                    "type": "string"
                }
            }
        },
        "controllers.DeploymentTargetHeartbeatRequest": {
            "type": "object",
            "properties": {
                "cluster_id": {
                    "type": "string"
                }
            }
        },
        "controllers.DeploymentTargetHeartbeatResponse": {
            "type": "object",
            "properties": {
                "cluster_id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "controllers.DeploymentTargetMetadataRequest": {
            "type": "object",
            "properties": {
                "cluster_id": {
                    "type": "string"
                },
                "kube_api_version": {
                    "type": "string"
                },
                "kube_platform": {
                    "type": "string",
                    "enum": [
                        "unknown",
                        "aws",
                        "azure",
                        "gcp",
                        "ocp",
                        "generic"
                    ]
                },
                "pds_chart_version": {
                    "type": "string"
                },
                "px_csi_enabled": {
                    "type": "string",
                    "enum": [
                        "unknown",
                        "yes",
                        "no"
                    ]
                },
                "px_service_namespace": {
                    "type": "string"
                },
                "px_version": {
                    "type": "string"
                }
            }
        },
        "controllers.OIDCInfoResponse": {
            "type": "object",
            "properties": {
                "authUrl": {
                    "type": "string",
                    "example": "https://release-staging.portworx.dev/landing/login"
                },
                "clientId": {
                    "type": "string"
                },
                "issuer": {
                    "type": "string",
                    "example": "https://release-staging-api.portworx.dev/api"
                },
                "redirectUrl": {
                    "type": "string",
                    "example": "http://localhost:8080/auth-wait"
                }
            }
        },
        "controllers.OIDCTokenResponse": {
            "type": "object",
            "properties": {
                "claims": {
                    "$ref": "#/definitions/auth.Claims"
                },
                "expiresIn": {
                    "type": "string"
                },
                "idToken": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                }
            }
        },
        "controllers.PaginatedAccountRoleBindings": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.AccountRoleBinding"
                    }
                }
            }
        },
        "controllers.PaginatedBackupTargetStates": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.BackupTargetState"
                    }
                }
            }
        },
        "controllers.PaginatedGlobalRoleBindings": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.GlobalRoleBinding"
                    }
                }
            }
        },
        "controllers.PaginatedProjectRoleBindings": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ProjectRoleBinding"
                    }
                }
            }
        },
        "controllers.PaginatedRoles": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/policy.Role"
                    }
                }
            }
        },
        "controllers.PaginatedTenantRoleBindings": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.TenantRoleBinding"
                    }
                }
            }
        },
        "controllers.PartialAzureCredentials": {
            "type": "object",
            "properties": {
                "account_name": {
                    "description": "Name of the Azure Storage account.",
                    "type": "string"
                }
            }
        },
        "controllers.PartialCredentials": {
            "type": "object",
            "properties": {
                "azure": {
                    "$ref": "#/definitions/controllers.PartialAzureCredentials"
                },
                "google": {
                    "$ref": "#/definitions/controllers.PartialGoogleCredentials"
                },
                "s3": {
                    "$ref": "#/definitions/controllers.PartialS3Credentials"
                },
                "s3_compatible": {
                    "$ref": "#/definitions/controllers.PartialS3CompatibleCredentials"
                }
            }
        },
        "controllers.PartialGoogleCredentials": {
            "type": "object",
            "properties": {
                "project_id": {
                    "description": "Project ID of the Google Cloud project.",
                    "type": "string"
                }
            }
        },
        "controllers.PartialS3CompatibleCredentials": {
            "type": "object",
            "properties": {
                "access_key": {
                    "description": "Access key for S3-compatible user.",
                    "type": "string"
                },
                "endpoint": {
                    "description": "Endpoint of S3-compatible storage service.",
                    "type": "string"
                }
            }
        },
        "controllers.PartialS3Credentials": {
            "type": "object",
            "properties": {
                "access_key": {
                    "description": "Access key for the AWS IAM user.",
                    "type": "string"
                },
                "endpoint": {
                    "description": "Endpoint of S3 storage service.",
                    "type": "string"
                }
            }
        },
        "controllers.RefreshTokenRequest": {
            "type": "object",
            "properties": {
                "refreshToken": {
                    "type": "string"
                }
            }
        },
        "controllers.ResourceSettingsSamples": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ResourceSettingsSample"
                    }
                }
            }
        },
        "controllers.ServiceAccountResponse": {
            "type": "object",
            "properties": {
                "account_id": {
                    "type": "string"
                },
                "created_at": {
                    "description": "CreatedAt is autogenerated on creation",
                    "type": "string"
                },
                "id": {
                    "description": "ID is auto generated on creation",
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "tenant_id": {
                    "type": "string"
                },
                "updated_at": {
                    "description": "UpdatedAt is autogenerated on update",
                    "type": "string"
                }
            }
        },
        "controllers.ServiceAccountTokenResponse": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string"
                }
            }
        },
        "controllers.StorageOptionsSamples": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.StorageOptionsSample"
                    }
                }
            }
        },
        "controllers.TargetClusterConfigResponse": {
            "type": "object",
            "properties": {
                "observability_url": {
                    "type": "string"
                },
                "teleport_ca_pin": {
                    "type": "string"
                },
                "teleport_join_token": {
                    "type": "string"
                },
                "teleport_proxy_addr": {
                    "type": "string"
                }
            }
        },
        "controllers.UpdateApplicationConfigurationTemplateRequest": {
            "type": "object",
            "properties": {
                "config_items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ConfigItem"
                    }
                },
                "name": {
                    "description": "See models.ApplicationConfigurationTemplate for more information.",
                    "type": "string"
                }
            }
        },
        "controllers.UpdateBackupPolicyRequest": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name of the backup policy. Must be unique for the given tenant.",
                    "type": "string"
                },
                "schedules": {
                    "description": "An array of the backup schedules. Must be non-empty.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.BackupSchedule"
                    }
                }
            }
        },
        "controllers.UpdateBackupTargetRequest": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name of the backup target. Must be unique for the given tenant.",
                    "type": "string"
                }
            }
        },
        "controllers.UpdateDeploymentRequest": {
            "type": "object",
            "properties": {
                "application_configuration_overrides": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "application_configuration_template_id": {
                    "type": "string"
                },
                "image_id": {
                    "type": "string"
                },
                "node_count": {
                    "description": "See models.Deployment for more information.",
                    "type": "integer",
                    "example": 3
                },
                "resource_settings_template_id": {
                    "type": "string"
                },
                "scheduled_backup": {
                    "description": "ScheduledBackup defines configuration for scheduled backup. Do not include in the JSON if no changes are wanted.",
                    "$ref": "#/definitions/controllers.UpdateDeploymentScheduledBackup"
                }
            }
        },
        "controllers.UpdateDeploymentScheduledBackup": {
            "type": "object",
            "properties": {
                "backup_policy_id": {
                    "type": "string"
                },
                "backup_target_id": {
                    "description": "BackupTargetID and BackupPolicyID must be both specified or not. Set both to null to have no scheduled backup.",
                    "type": "string"
                }
            }
        },
        "controllers.UpdateDeploymentTargetRequest": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                }
            }
        },
        "controllers.UpdateNamespaceRequest": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "string"
                }
            }
        },
        "controllers.UpdateResourceSettingsTemplateRequest": {
            "type": "object",
            "properties": {
                "cpu_limit": {
                    "type": "string"
                },
                "cpu_request": {
                    "type": "string"
                },
                "memory_limit": {
                    "type": "string"
                },
                "memory_request": {
                    "type": "string"
                },
                "name": {
                    "description": "See models.ResourceSettingsTemplate for more information.",
                    "type": "string"
                },
                "storage_request": {
                    "type": "string"
                }
            }
        },
        "controllers.UpdateStorageOptionsTemplateRequest": {
            "type": "object",
            "properties": {
                "fg": {
                    "type": "boolean"
                },
                "fs": {
                    "description": "Filesystem to be laid out.",
                    "type": "string",
                    "enum": [
                        "xfs",
                        "ext4"
                    ]
                },
                "name": {
                    "description": "See models.StorageOptionsTemplate for more information.",
                    "type": "string"
                },
                "provisioner": {
                    "description": "Portworx volume provisioner. Valid values are: \"pxd.portworx.com\" for PX CSI, \"kubernetes.io/portworx-volume\" for PX in-tree or \"auto\" for auto-detect",
                    "type": "string",
                    "enum": [
                        "pxd.portworx.com",
                        "kubernetes.io/portworx-volume",
                        "auto"
                    ]
                },
                "repl": {
                    "description": "Replication factor for the volume.",
                    "type": "integer",
                    "enum": [
                        1,
                        2,
                        3
                    ]
                },
                "secure": {
                    "type": "boolean"
                }
            }
        },
        "controllers.WhoAmIResponse": {
            "type": "object",
            "properties": {
                "service_account": {
                    "$ref": "#/definitions/controllers.WhoAmIServiceAccount"
                },
                "user": {
                    "$ref": "#/definitions/controllers.WhoAmIUser"
                }
            }
        },
        "controllers.WhoAmIServiceAccount": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "CreatedAt is autogenerated on creation",
                    "type": "string"
                },
                "id": {
                    "description": "ID is auto generated on creation",
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "tenant_id": {
                    "type": "string"
                },
                "updated_at": {
                    "description": "UpdatedAt is autogenerated on update",
                    "type": "string"
                }
            }
        },
        "controllers.WhoAmIUser": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "CreatedAt is autogenerated on creation",
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "description": "ID is auto generated on creation",
                    "type": "string"
                },
                "updated_at": {
                    "description": "UpdatedAt is autogenerated on update",
                    "type": "string"
                }
            }
        },
        "controllers.acceptEULARequest": {
            "type": "object",
            "properties": {
                "version": {
                    "description": "Version of the EULA.",
                    "type": "string"
                }
            }
        },
        "controllers.createAccountRequest": {
            "type": "object",
            "properties": {
                "baas_features_enabled": {
                    "description": "Whether BAAS should be enabled for this account.",
                    "type": "boolean"
                },
                "dns_details": {
                    "description": "(optional) DNS Details.",
                    "$ref": "#/definitions/models.DNSDetails"
                },
                "maas_details": {
                    "description": "(optional) MAAS Details.",
                    "$ref": "#/definitions/models.MAASDetails"
                },
                "name": {
                    "description": "Name of the account.",
                    "type": "string"
                },
                "pds_features_enabled": {
                    "description": "Whether PDS should be enabled for this account.",
                    "type": "boolean"
                },
                "pxone_features_enabled": {
                    "description": "Whether PX-ONE should be enabled for this account.",
                    "type": "boolean"
                },
                "subdomain": {
                    "description": "(optional) Account subdomain name.",
                    "type": "string"
                }
            }
        },
        "controllers.createApplicationConfigurationTemplateRequest": {
            "type": "object",
            "properties": {
                "config_items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ConfigItem"
                    }
                },
                "data_service_id": {
                    "type": "string"
                },
                "name": {
                    "description": "See models.ApplicationConfigurationTemplate for more information.",
                    "type": "string"
                }
            }
        },
        "controllers.createBackupCredentialsRequest": {
            "type": "object",
            "properties": {
                "credentials": {
                    "description": "The actual credentials. Type of the new credentials must match the existing ones.",
                    "$ref": "#/definitions/controllers.Credentials"
                },
                "name": {
                    "description": "Name of the backup credentials. Must be unique for the given tenant.",
                    "type": "string"
                }
            }
        },
        "controllers.createBackupPolicyRequest": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name of the backup policy. Must be unique for the given tenant.",
                    "type": "string"
                },
                "schedules": {
                    "description": "An array of the backup schedules. Must be non-empty.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.BackupSchedule"
                    }
                }
            }
        },
        "controllers.createNamespace": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name of the namespace",
                    "type": "string"
                }
            }
        },
        "controllers.createResourceSettingsTemplateRequest": {
            "type": "object",
            "properties": {
                "cpu_limit": {
                    "type": "string"
                },
                "cpu_request": {
                    "type": "string"
                },
                "data_service_id": {
                    "type": "string"
                },
                "memory_limit": {
                    "type": "string"
                },
                "memory_request": {
                    "type": "string"
                },
                "name": {
                    "description": "See models.ResourceSettingsTemplate for more information.",
                    "type": "string"
                },
                "storage_request": {
                    "type": "string"
                }
            }
        },
        "controllers.createServiceAccountRequest": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "example": "Name of the service account"
                }
            }
        },
        "controllers.createStorageOptionsTemplateRequest": {
            "type": "object",
            "properties": {
                "fg": {
                    "type": "boolean"
                },
                "fs": {
                    "description": "Filesystem to be laid out.",
                    "type": "string",
                    "enum": [
                        "xfs",
                        "ext4"
                    ]
                },
                "name": {
                    "description": "See models.StorageOptionsTemplate for more information.",
                    "type": "string"
                },
                "provisioner": {
                    "description": "Portworx volume provisioner. Valid values are: \"pxd.portworx.com\" for PX CSI, \"kubernetes.io/portworx-volume\" for PX in-tree or \"auto\" for auto-detect",
                    "type": "string",
                    "enum": [
                        "pxd.portworx.com",
                        "kubernetes.io/portworx-volume",
                        "auto"
                    ]
                },
                "repl": {
                    "description": "Replication factor for the volume.",
                    "type": "integer",
                    "enum": [
                        1,
                        2,
                        3
                    ]
                },
                "secure": {
                    "type": "boolean"
                }
            }
        },
        "controllers.updateBackupCredentialsRequest": {
            "type": "object",
            "properties": {
                "credentials": {
                    "description": "The actual credentials. Type of the new credentials must match the existing ones.",
                    "$ref": "#/definitions/controllers.Credentials"
                },
                "name": {
                    "description": "Name of the backup credentials. Must be unique for the given tenant.",
                    "type": "string"
                }
            }
        },
        "controllers.updateBackupRequest": {
            "type": "object",
            "properties": {
                "job_history_limit": {
                    "type": "integer"
                }
            }
        },
        "controllers.updateGlobalConfigRequest": {
            "type": "object",
            "properties": {
                "tls_preview_enabled": {
                    "description": "Specify if the TLS Preview feature should be enabled for this account.",
                    "type": "string",
                    "enum": [
                        "all"
                    ]
                },
                "version_availability": {
                    "description": "Specify what data service versions are available for deployment for this account.",
                    "type": "string",
                    "enum": [
                        "all"
                    ]
                },
                "version_updatability": {
                    "description": "Specify what data service versions are updatable for this account.",
                    "type": "string",
                    "enum": [
                        "all"
                    ]
                }
            }
        },
        "controllers.upsertAccountRoleBindingRequest": {
            "type": "object",
            "properties": {
                "actor_id": {
                    "type": "string",
                    "example": "ID of the role subject"
                },
                "actor_type": {
                    "type": "string",
                    "example": "Type of the role subject"
                },
                "role_name": {
                    "type": "string",
                    "example": "Name of the assigned account role"
                }
            }
        },
        "controllers.upsertProjectRoleBindingRequest": {
            "type": "object",
            "properties": {
                "actor_id": {
                    "type": "string",
                    "example": "ID of the role subject"
                },
                "actor_type": {
                    "type": "string",
                    "example": "Type of the role subject"
                },
                "role_name": {
                    "type": "string",
                    "example": "Name of the assigned account role"
                }
            }
        },
        "controllers.upsertTenantRoleBindingRequest": {
            "type": "object",
            "properties": {
                "actor_id": {
                    "type": "string",
                    "example": "ID of the role subject"
                },
                "actor_type": {
                    "type": "string",
                    "example": "Type of the role subject"
                },
                "role_name": {
                    "type": "string",
                    "example": "Name of the assigned account role"
                }
            }
        },
        "deployments.Condition": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "reason": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "deployments.ConnectionDetails": {
            "type": "object",
            "properties": {
                "nodes": {
                    "description": "Nodes of the data service.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "ports": {
                    "description": "Ports provided by the data service (name and number).",
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer"
                    }
                }
            }
        },
        "deployments.ConnectionInfo": {
            "type": "object",
            "properties": {
                "clusterDetails": {
                    "type": "object",
                    "additionalProperties": true
                },
                "connectionDetails": {
                    "$ref": "#/definitions/deployments.ConnectionDetails"
                },
                "notReadyPods": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/deployments.PodInfo"
                    }
                },
                "pods": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/deployments.PodInfo"
                    }
                }
            }
        },
        "deployments.Credentials": {
            "type": "object",
            "properties": {
                "password": {
                    "type": "string"
                }
            }
        },
        "deployments.PodInfo": {
            "type": "object",
            "properties": {
                "ip": {
                    "description": "The IP of this pod.",
                    "type": "string"
                },
                "name": {
                    "description": "Name is the Hostname of this pod.",
                    "type": "string"
                },
                "workerNode": {
                    "description": "Node hosting this pod.",
                    "type": "string"
                }
            }
        },
        "deployments.ResourceConditions": {
            "type": "object",
            "properties": {
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/deployments.Condition"
                    }
                },
                "resource": {
                    "$ref": "#/definitions/v1.TypedLocalObjectReference"
                }
            }
        },
        "deployments.ResourceEvent": {
            "type": "object",
            "properties": {
                "action": {
                    "description": "Action that was taken/failed regarding to the given object.",
                    "type": "string",
                    "example": "Scheduling"
                },
                "message": {
                    "description": "Message is a human-readable description of the status of this operation.",
                    "type": "string",
                    "example": "0/3 nodes are available"
                },
                "name": {
                    "description": "Name of the Event resource in target cluster.",
                    "type": "string",
                    "example": "cas-events-0h35cp-0.16f4c1e217362a3e"
                },
                "reason": {
                    "description": "Reason is a short, machine understandable string that gives the reason for the transition into the object's current status.",
                    "type": "string",
                    "example": "FailedScheduling"
                },
                "timestamp": {
                    "description": "Timestamp informs about when did the event occur most recently.",
                    "type": "string"
                },
                "type": {
                    "description": "Type of this event , new types could be added in the future.",
                    "type": "string",
                    "enum": [
                        "Normal",
                        "Warning"
                    ]
                }
            }
        },
        "deployments.ResourceEvents": {
            "type": "object",
            "properties": {
                "events": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/deployments.ResourceEvent"
                    }
                },
                "resource": {
                    "$ref": "#/definitions/v1.TypedLocalObjectReference"
                }
            }
        },
        "models.AWSDetails": {
            "type": "object",
            "properties": {
                "access_key": {
                    "type": "string"
                },
                "hosted_zone_id": {
                    "type": "string"
                },
                "secret_key": {
                    "type": "string"
                }
            }
        },
        "models.Account": {
            "type": "object",
            "properties": {
                "baas_features_enabled": {
                    "type": "boolean"
                },
                "created_at": {
                    "description": "CreatedAt is autogenerated on creation",
                    "type": "string"
                },
                "eula": {
                    "$ref": "#/definitions/models.EULADetails"
                },
                "global_config": {
                    "$ref": "#/definitions/models.AccountGlobalConfig"
                },
                "id": {
                    "description": "ID is auto generated on creation",
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "pds_features_enabled": {
                    "type": "boolean"
                },
                "pxone_features_enabled": {
                    "type": "boolean"
                },
                "updated_at": {
                    "description": "UpdatedAt is autogenerated on update",
                    "type": "string"
                }
            }
        },
        "models.AccountGlobalConfig": {
            "type": "object",
            "properties": {
                "tls_preview_enabled": {
                    "description": "Specify if the TLS Preview feature should be enabled for this account.",
                    "type": "string"
                },
                "version_availability": {
                    "description": "Specify what data service versions are available for deployment for this account.",
                    "type": "string"
                },
                "version_updatability": {
                    "description": "Specify what data service versions are updatable for this account.",
                    "type": "string"
                }
            }
        },
        "models.AccountRoleBinding": {
            "type": "object",
            "properties": {
                "account_id": {
                    "type": "string"
                },
                "actor_id": {
                    "type": "string"
                },
                "actor_type": {
                    "type": "string"
                },
                "role_name": {
                    "type": "string"
                }
            }
        },
        "models.AccountRoleInvitation": {
            "type": "object",
            "properties": {
                "account_id": {
                    "type": "string"
                },
                "created_at": {
                    "description": "CreatedAt is autogenerated on creation",
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "description": "ID is auto generated on creation",
                    "type": "string"
                },
                "issuer": {
                    "type": "string"
                },
                "role_name": {
                    "type": "string"
                },
                "updated_at": {
                    "description": "UpdatedAt is autogenerated on update",
                    "type": "string"
                }
            }
        },
        "models.ApplicationConfigurationSample": {
            "type": "object",
            "properties": {
                "config_items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ConfigItem"
                    }
                },
                "created": {
                    "type": "string"
                },
                "data_service_id": {
                    "type": "string"
                },
                "name": {
                    "description": "Name of the template. Must be unique for a specific data service within the tenant scope.",
                    "type": "string"
                },
                "updated": {
                    "type": "string"
                },
                "version": {
                    "type": "integer"
                }
            }
        },
        "models.ApplicationConfigurationTemplate": {
            "type": "object",
            "properties": {
                "account_id": {
                    "type": "string"
                },
                "config_items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ConfigItem"
                    }
                },
                "created_at": {
                    "description": "CreatedAt is autogenerated on creation",
                    "type": "string"
                },
                "data_service_id": {
                    "type": "string"
                },
                "id": {
                    "description": "ID is auto generated on creation",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the template. Must be unique for a specific data service within the tenant scope.",
                    "type": "string"
                },
                "tenant_id": {
                    "type": "string"
                },
                "updated_at": {
                    "description": "UpdatedAt is autogenerated on update",
                    "type": "string"
                }
            }
        },
        "models.AuthorizerRequest": {
            "type": "object",
            "properties": {
                "entity_id": {
                    "type": "string"
                },
                "entity_type": {
                    "type": "string"
                },
                "operation": {
                    "type": "string"
                }
            }
        },
        "models.AuthorizerResponse": {
            "type": "object",
            "properties": {
                "allow": {
                    "type": "boolean"
                }
            }
        },
        "models.AzureCredentials": {
            "type": "object",
            "properties": {
                "account_key": {
                    "description": "Access key for the Azure Storage account.",
                    "type": "string"
                },
                "account_name": {
                    "description": "Name of the Azure Storage account.",
                    "type": "string"
                }
            }
        },
        "models.Backup": {
            "type": "object",
            "properties": {
                "account_id": {
                    "type": "string"
                },
                "backup_level": {
                    "type": "string",
                    "enum": [
                        "snapshot",
                        "incremental"
                    ]
                },
                "backup_target_id": {
                    "type": "string"
                },
                "backup_type": {
                    "type": "string",
                    "enum": [
                        "adhoc",
                        "scheduled"
                    ]
                },
                "cluster_resource_name": {
                    "description": "ClusterResourceName k8s resource name for backup, built from ID.",
                    "type": "string"
                },
                "created_at": {
                    "description": "CreatedAt is autogenerated on creation",
                    "type": "string"
                },
                "data_service_id": {
                    "type": "string"
                },
                "deployment_id": {
                    "type": "string"
                },
                "deployment_name": {
                    "description": "DeploymentName name of the deployment to give the user more info in cases when the deployment has already been deleted.",
                    "type": "string"
                },
                "deployment_target_id": {
                    "description": "DeploymentTargetID on which target the backup is created (models.DeploymentTarget).",
                    "type": "string"
                },
                "id": {
                    "description": "ID is auto generated on creation",
                    "type": "string"
                },
                "job_history_limit": {
                    "description": "JobHistoryLimit is a number of retained backup jobs. Must be 1 or greater.",
                    "type": "integer"
                },
                "namespace_id": {
                    "description": "NamespaceID in which namespace the Backup CR is created (models.Namespace).",
                    "type": "string"
                },
                "project_id": {
                    "type": "string"
                },
                "reclaim_policy": {
                    "description": "ReclaimPolicy decides if the volume snapshots should get deleted when a Backup CR gets deleted.",
                    "type": "string",
                    "enum": [
                        "retain",
                        "delete"
                    ]
                },
                "schedule": {
                    "description": "Schedule holds a CRON expression for the backup schedule.",
                    "type": "string"
                },
                "state": {
                    "description": "State of backup CR in target cluster.",
                    "type": "string",
                    "enum": [
                        "created",
                        "pending",
                        "failed"
                    ]
                },
                "suspend": {
                    "description": "Suspend allows us to suspend a scheduled backup from creating new backup jobs.",
                    "type": "boolean"
                },
                "tenant_id": {
                    "type": "string"
                },
                "updated_at": {
                    "description": "UpdatedAt is autogenerated on update",
                    "type": "string"
                }
            }
        },
        "models.BackupCredentials": {
            "type": "object",
            "properties": {
                "account_id": {
                    "type": "string"
                },
                "created_at": {
                    "description": "CreatedAt is autogenerated on creation",
                    "type": "string"
                },
                "id": {
                    "description": "ID is auto generated on creation",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the backup credentials. Must be unique for the given tenant.",
                    "type": "string"
                },
                "tenant_id": {
                    "type": "string"
                },
                "type": {
                    "description": "Type of the credentials.",
                    "type": "string",
                    "enum": [
                        "azure",
                        "s3",
                        "s3-compatible"
                    ]
                },
                "updated_at": {
                    "description": "UpdatedAt is autogenerated on update",
                    "type": "string"
                }
            }
        },
        "models.BackupJob": {
            "type": "object",
            "properties": {
                "backup": {
                    "description": "Backup that created the BackupJob, sets BackupID to null on deletion.",
                    "$ref": "#/definitions/models.Backup"
                },
                "backup_id": {
                    "description": "BackupID which backup created the snapshot (nullable).",
                    "type": "string"
                },
                "backup_spec": {
                    "description": "BackupSpecJSON is the specification of the Backup in JSON format at the time the snapshot was taken.",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "cloud_credential_name": {
                    "description": "CloudCredentialName credentials to access snapshot.",
                    "type": "string"
                },
                "cloud_snap_id": {
                    "description": "CloudSnapID snapshot of the backup volume.",
                    "type": "string"
                },
                "completion_status": {
                    "description": "CompletionStatus of the backup job.",
                    "type": "string",
                    "enum": [
                        "Active",
                        "Succeeded",
                        "Failed"
                    ]
                },
                "completion_time": {
                    "type": "string"
                },
                "created_at": {
                    "description": "CreatedAt is autogenerated on creation",
                    "type": "string"
                },
                "data_service_spec": {
                    "description": "BackupSpecJSON is the specification of the Backup in JSON format at the time the snapshot was taken.",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "deployment": {
                    "description": "Deployment that was backed up, sets DeploymentID to null on deletion.",
                    "$ref": "#/definitions/models.Deployment"
                },
                "deployment_id": {
                    "description": "DeploymentID which deployment was backed up (nullable).",
                    "type": "string"
                },
                "error_code": {
                    "type": "string",
                    "enum": [
                        "JobFailed",
                        "VolumeSnapshotFailed",
                        "PXCloudCredentialsNotFound"
                    ]
                },
                "error_message": {
                    "type": "string"
                },
                "file_size": {
                    "description": "FileSize of the CloudSnap image.",
                    "type": "integer"
                },
                "id": {
                    "description": "ID is auto generated on creation",
                    "type": "string"
                },
                "name": {
                    "description": "Name shown in UI.",
                    "type": "string"
                },
                "project": {
                    "description": "Project that created the BackupJob, cascades on deletion.",
                    "$ref": "#/definitions/models.Project"
                },
                "project_id": {
                    "description": "ProjectID which created the snapshot (required).",
                    "type": "string"
                },
                "start_time": {
                    "type": "string"
                },
                "updated_at": {
                    "description": "UpdatedAt is autogenerated on update",
                    "type": "string"
                }
            }
        },
        "models.BackupPolicy": {
            "type": "object",
            "properties": {
                "account_id": {
                    "type": "string"
                },
                "created_at": {
                    "description": "CreatedAt is autogenerated on creation",
                    "type": "string"
                },
                "id": {
                    "description": "ID is auto generated on creation",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the backup policy. Must be unique for the given tenant.",
                    "type": "string"
                },
                "schedules": {
                    "description": "A list of the backup schedules. Must be non-empty.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.BackupSchedule"
                    }
                },
                "tenant_id": {
                    "type": "string"
                },
                "updated_at": {
                    "description": "UpdatedAt is autogenerated on update",
                    "type": "string"
                }
            }
        },
        "models.BackupPolicySample": {
            "type": "object",
            "properties": {
                "created": {
                    "type": "string"
                },
                "name": {
                    "description": "Name of the backup policy. Must be unique for the given tenant.",
                    "type": "string"
                },
                "schedules": {
                    "description": "A list of the backup schedules. Must be non-empty.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.BackupSchedule"
                    }
                },
                "updated": {
                    "type": "string"
                },
                "version": {
                    "type": "integer"
                }
            }
        },
        "models.BackupSchedule": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "An ID of the backup schedule to help the UI identify validation failures. The type is UUID and it is generated on the UI side.",
                    "type": "string"
                },
                "retention_count": {
                    "description": "Number of retained backup jobs. Must be 1 or greater.",
                    "type": "integer"
                },
                "schedule": {
                    "description": "CRON expression for the backup schedule.",
                    "type": "string"
                },
                "type": {
                    "description": "Type of the backup schedule.",
                    "type": "string",
                    "enum": [
                        "incremental",
                        "full"
                    ]
                }
            }
        },
        "models.BackupTarget": {
            "type": "object",
            "properties": {
                "account_id": {
                    "type": "string"
                },
                "backup_credentials_id": {
                    "type": "string"
                },
                "bucket": {
                    "description": "Bucket name for S3 or S3 compatible. Container name for Azure.",
                    "type": "string"
                },
                "created_at": {
                    "description": "CreatedAt is autogenerated on creation",
                    "type": "string"
                },
                "id": {
                    "description": "ID is auto generated on creation",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the backup target. Must be unique for the given tenant.",
                    "type": "string"
                },
                "region": {
                    "description": "Region of the bucket. Required for S3. Otherwise must be empty.",
                    "type": "string"
                },
                "tenant_id": {
                    "type": "string"
                },
                "type": {
                    "description": "Type of the backup target. Must match the used backup credentials.",
                    "type": "string",
                    "enum": [
                        "azure",
                        "s3",
                        "s3-compatible"
                    ]
                },
                "updated_at": {
                    "description": "UpdatedAt is autogenerated on update",
                    "type": "string"
                }
            }
        },
        "models.BackupTargetState": {
            "type": "object",
            "properties": {
                "backup_target_id": {
                    "type": "string"
                },
                "deployment_target_id": {
                    "type": "string"
                },
                "error_code": {
                    "description": "Predefined API error code.",
                    "type": "string",
                    "enum": [
                        "deployment_target_unavailable",
                        "failed_to_create_px_credentials",
                        "failed_to_delete_px_credentials"
                    ]
                },
                "error_details": {
                    "description": "More detailed error message possibly containing the root cause of the error, not suitable to show in the UI.",
                    "type": "string"
                },
                "error_message": {
                    "description": "High level human-readable error message determined by the ErrorCode.",
                    "type": "string"
                },
                "px_credentials_id": {
                    "description": "ID of the credentials in PX cluster.",
                    "type": "string"
                },
                "px_credentials_name": {
                    "description": "Name of the credentials in PX cluster. This will be used when creating a new backup.",
                    "type": "string"
                },
                "state": {
                    "description": "State of the synchronization of credentials.",
                    "type": "string",
                    "enum": [
                        "pending",
                        "successful",
                        "failed_create",
                        "failed_delete",
                        "failed_update"
                    ]
                }
            }
        },
        "models.ConfigItem": {
            "type": "object",
            "properties": {
                "deploy_time": {
                    "description": "If true, user must fill the value for this configuration parameter when creating a new deployment.",
                    "type": "boolean"
                },
                "key": {
                    "description": "Configuration key, transfers to the image's environment variable.",
                    "type": "string"
                },
                "value": {
                    "description": "Configuration value.",
                    "type": "string"
                }
            }
        },
        "models.DNSDetails": {
            "type": "object",
            "properties": {
                "aws_details": {
                    "$ref": "#/definitions/models.AWSDetails"
                },
                "dns_zone": {
                    "type": "string"
                }
            }
        },
        "models.DataService": {
            "type": "object",
            "properties": {
                "coming_soon": {
                    "type": "boolean"
                },
                "created_at": {
                    "description": "CreatedAt is autogenerated on creation",
                    "type": "string"
                },
                "has_full_backup": {
                    "type": "boolean"
                },
                "has_incremental_backup": {
                    "type": "boolean"
                },
                "id": {
                    "description": "ID is auto generated on creation",
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "node_restrictions": {
                    "$ref": "#/definitions/models.NodeRestrictions"
                },
                "nodes_limitations": {
                    "description": "TODO DS-2341 Remove this field once everything is implemented to use the NodeRestrictions.",
                    "type": "string"
                },
                "short_name": {
                    "type": "string"
                },
                "updated_at": {
                    "description": "UpdatedAt is autogenerated on update",
                    "type": "string"
                }
            }
        },
        "models.Deployment": {
            "type": "object",
            "properties": {
                "account_id": {
                    "description": "AccountID which account the deployment belongs to (models.Account).",
                    "type": "string"
                },
                "cluster_resource_name": {
                    "description": "ClusterResourceName k8s resource name for deployment, built from [data service short name + name + id].",
                    "type": "string"
                },
                "configuration": {
                    "description": "Configuration data service specific configuration for the deployment (models.ApplicationConfigurationTemplate).",
                    "type": "object",
                    "additionalProperties": true
                },
                "connection_details": {
                    "description": "ConnectionDetails urls, ports, credentials, etc for connecting to the data service.",
                    "type": "object",
                    "additionalProperties": true
                },
                "created_at": {
                    "description": "CreatedAt is autogenerated on creation",
                    "type": "string"
                },
                "data_service_id": {
                    "description": "DataServiceID type of data service (models.DataService).",
                    "type": "string"
                },
                "deployment_manifest": {
                    "$ref": "#/definitions/models.DeploymentManifest"
                },
                "deployment_target": {
                    "$ref": "#/definitions/models.DeploymentTarget"
                },
                "deployment_target_id": {
                    "description": "DeploymentTargetID on which target the data service is deployed (models.DeploymentTarget).",
                    "type": "string"
                },
                "dns_zone": {
                    "description": "DNSZone domain which this deployment should be a part of (eg pds-dns.io).",
                    "type": "string"
                },
                "error": {
                    "$ref": "#/definitions/models.ErrorData"
                },
                "id": {
                    "description": "ID is auto generated on creation",
                    "type": "string"
                },
                "image_id": {
                    "description": "ImageID image of data service (models.Image).",
                    "type": "string"
                },
                "initialize": {
                    "description": "Initialize used to control startup scripts.",
                    "type": "string",
                    "enum": [
                        "Once",
                        "Always",
                        "Never",
                        "Manual"
                    ]
                },
                "load_balancer_source_ranges": {
                    "description": "LoadBalancerSourceRanges can be used to restrict access to the data service (eg 37.0.113.0/24;82.0.220.42/24).",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "description": "Name given by user when creating the deployment.",
                    "type": "string"
                },
                "namespace": {
                    "$ref": "#/definitions/models.Namespace"
                },
                "namespace_id": {
                    "description": "NamespaceID in which namespace the data service is deployed (models.Namespace).",
                    "type": "string"
                },
                "node_count": {
                    "description": "NodeCount total nodes in the deployment.",
                    "type": "integer"
                },
                "project_id": {
                    "description": "ProjectID which project the deployment belongs to (models.Project).",
                    "type": "string"
                },
                "resources": {
                    "description": "Resources k8s resources for each node in the deployment (models.ResourceSettingsTemplate).",
                    "$ref": "#/definitions/models.DeploymentResources"
                },
                "service_type": {
                    "description": "ServiceType k8s service type.",
                    "type": "string",
                    "enum": [
                        "ClusterIP",
                        "NodePort",
                        "LoadBalancer",
                        "ExternalName"
                    ]
                },
                "state": {
                    "description": "State of deployment.",
                    "type": "string",
                    "enum": [
                        "created",
                        "pending",
                        "failed"
                    ]
                },
                "storage_options": {
                    "description": "StorageOptions PX configuration options (models.StorageOptionsTemplate).",
                    "$ref": "#/definitions/models.DeploymentStorageOptions"
                },
                "tenant_id": {
                    "description": "TenantID which tenant the deployment belongs to (models.Tenant).",
                    "type": "string"
                },
                "tls_enabled": {
                    "description": "Whether Transport Layer Security support is enabled",
                    "type": "boolean"
                },
                "tls_issuer": {
                    "description": "The Issuer (~Certificate Authority) for the TLS certificates",
                    "type": "string"
                },
                "updated_at": {
                    "description": "UpdatedAt is autogenerated on update",
                    "type": "string"
                },
                "version_id": {
                    "description": "VersionID version of data service (models.Version).",
                    "type": "string"
                }
            }
        },
        "models.DeploymentManifest": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "CreatedAt is autogenerated on creation",
                    "type": "string"
                },
                "deployment": {
                    "$ref": "#/definitions/models.Deployment"
                },
                "deployment_id": {
                    "type": "string"
                },
                "id": {
                    "description": "ID is auto generated on creation",
                    "type": "string"
                },
                "manifest": {
                    "type": "object",
                    "additionalProperties": true
                },
                "readyReplicas": {
                    "type": "integer"
                },
                "replicas": {
                    "type": "integer"
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "Deploying",
                        "Partially Available",
                        "Available",
                        "Unavailable",
                        "Unknown"
                    ]
                },
                "timestamp": {
                    "type": "string"
                },
                "updated_at": {
                    "description": "UpdatedAt is autogenerated on update",
                    "type": "string"
                }
            }
        },
        "models.DeploymentResources": {
            "type": "object",
            "properties": {
                "cpu_limit": {
                    "type": "string"
                },
                "cpu_request": {
                    "type": "string"
                },
                "memory_limit": {
                    "type": "string"
                },
                "memory_request": {
                    "type": "string"
                },
                "storage_request": {
                    "type": "string"
                }
            }
        },
        "models.DeploymentStorageOptions": {
            "type": "object",
            "properties": {
                "fg": {
                    "type": "boolean"
                },
                "fs": {
                    "type": "string"
                },
                "provisioner": {
                    "type": "string"
                },
                "repl": {
                    "type": "integer"
                },
                "secure": {
                    "type": "boolean"
                }
            }
        },
        "models.DeploymentTarget": {
            "type": "object",
            "properties": {
                "account_id": {
                    "type": "string"
                },
                "capabilities": {
                    "$ref": "#/definitions/models.DeploymentTargetCapabilities"
                },
                "cluster_id": {
                    "type": "string"
                },
                "connection_status": {
                    "type": "string"
                },
                "created_at": {
                    "description": "CreatedAt is autogenerated on creation",
                    "type": "string"
                },
                "id": {
                    "description": "ID is auto generated on creation",
                    "type": "string"
                },
                "last_health_check": {
                    "type": "string"
                },
                "last_operator_heartbeat": {
                    "type": "string"
                },
                "metadata": {
                    "$ref": "#/definitions/models.DeploymentTargetMetadata"
                },
                "name": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "tenant_id": {
                    "type": "string"
                },
                "tls_issuer": {
                    "type": "string"
                },
                "tls_required": {
                    "type": "boolean"
                },
                "updated_at": {
                    "description": "UpdatedAt is autogenerated on update",
                    "type": "string"
                }
            }
        },
        "models.DeploymentTargetCapabilities": {
            "type": "object",
            "properties": {
                "backup": {
                    "type": "string"
                },
                "capabilities": {
                    "type": "string"
                },
                "cassandra": {
                    "type": "string"
                },
                "consul": {
                    "type": "string"
                },
                "couchbase": {
                    "type": "string"
                },
                "crd_reporting": {
                    "type": "string"
                },
                "data_service_tls": {
                    "type": "string"
                },
                "database": {
                    "type": "string"
                },
                "elasticsearch": {
                    "type": "string"
                },
                "kafka": {
                    "type": "string"
                },
                "mongodb": {
                    "type": "string"
                },
                "mysql": {
                    "type": "string"
                },
                "postgresql": {
                    "type": "string"
                },
                "rabbitmq": {
                    "type": "string"
                },
                "redis": {
                    "type": "string"
                },
                "sqlserver": {
                    "type": "string"
                },
                "zookeeper": {
                    "type": "string"
                }
            }
        },
        "models.DeploymentTargetMetadata": {
            "type": "object",
            "properties": {
                "kube_api_version": {
                    "type": "string"
                },
                "kube_platform": {
                    "type": "string"
                },
                "pds_chart_version": {
                    "type": "string"
                },
                "pds_features": {
                    "type": "string"
                },
                "pds_operator_version": {
                    "type": "string"
                },
                "px_csi_enabled": {
                    "type": "string"
                },
                "px_service_namespace": {
                    "type": "string"
                },
                "px_status": {
                    "type": "string"
                },
                "px_version": {
                    "type": "string"
                }
            }
        },
        "models.EULADetails": {
            "type": "object",
            "properties": {
                "accepted": {
                    "type": "boolean"
                },
                "accepted_version": {
                    "type": "string"
                }
            }
        },
        "models.ErrorData": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Predefined API error code.",
                    "type": "string"
                },
                "details": {
                    "description": "More detailed error message possibly containing the root cause.",
                    "type": "string"
                },
                "message": {
                    "description": "High level human-readable error message determined by the ErrorCode.",
                    "type": "string"
                }
            }
        },
        "models.GlobalRoleBinding": {
            "type": "object",
            "properties": {
                "actor_id": {
                    "type": "string"
                },
                "actor_type": {
                    "type": "string"
                },
                "role_name": {
                    "type": "string"
                }
            }
        },
        "models.GoogleCredentials": {
            "type": "object",
            "properties": {
                "json_key": {
                    "description": "JSON key for the Google Storage account.",
                    "type": "string"
                },
                "project_id": {
                    "description": "Project ID of the Google project.",
                    "type": "string"
                }
            }
        },
        "models.Image": {
            "type": "object",
            "properties": {
                "build": {
                    "type": "string"
                },
                "capabilities": {
                    "type": "object",
                    "additionalProperties": true
                },
                "created_at": {
                    "description": "CreatedAt is autogenerated on creation",
                    "type": "string"
                },
                "data_service_id": {
                    "type": "string"
                },
                "id": {
                    "description": "ID is auto generated on creation",
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "namespace": {
                    "type": "string"
                },
                "registry": {
                    "type": "string"
                },
                "tag": {
                    "type": "string"
                },
                "tls_available": {
                    "type": "boolean"
                },
                "updated_at": {
                    "description": "UpdatedAt is autogenerated on update",
                    "type": "string"
                },
                "version_id": {
                    "type": "string"
                }
            }
        },
        "models.MAASDetails": {
            "type": "object",
            "properties": {
                "maas_id": {
                    "type": "string"
                }
            }
        },
        "models.Namespace": {
            "type": "object",
            "properties": {
                "account_id": {
                    "type": "string"
                },
                "created_at": {
                    "description": "CreatedAt is autogenerated on creation",
                    "type": "string"
                },
                "deployment_target_id": {
                    "type": "string"
                },
                "id": {
                    "description": "ID is auto generated on creation",
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "tenant_id": {
                    "type": "string"
                },
                "updated_at": {
                    "description": "UpdatedAt is autogenerated on update",
                    "type": "string"
                }
            }
        },
        "models.NodeRestrictions": {
            "type": "object",
            "properties": {
                "downsize_enabled": {
                    "description": "Whether downsizing the cluster is enabled during editing.",
                    "type": "boolean"
                },
                "resize_disabled": {
                    "description": "List of all node sizes that are not allowed to change during editing.",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "simple_config": {
                    "description": "List of all allowed node sizes.",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "models.PaginatedResult-models_Account": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Account"
                    }
                },
                "pagination": {
                    "$ref": "#/definitions/constraint.Pagination"
                }
            }
        },
        "models.PaginatedResult-models_AccountRoleInvitation": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.AccountRoleInvitation"
                    }
                },
                "pagination": {
                    "$ref": "#/definitions/constraint.Pagination"
                }
            }
        },
        "models.PaginatedResult-models_ApplicationConfigurationTemplate": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ApplicationConfigurationTemplate"
                    }
                },
                "pagination": {
                    "$ref": "#/definitions/constraint.Pagination"
                }
            }
        },
        "models.PaginatedResult-models_Backup": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Backup"
                    }
                },
                "pagination": {
                    "$ref": "#/definitions/constraint.Pagination"
                }
            }
        },
        "models.PaginatedResult-models_BackupCredentials": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.BackupCredentials"
                    }
                },
                "pagination": {
                    "$ref": "#/definitions/constraint.Pagination"
                }
            }
        },
        "models.PaginatedResult-models_BackupPolicy": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.BackupPolicy"
                    }
                },
                "pagination": {
                    "$ref": "#/definitions/constraint.Pagination"
                }
            }
        },
        "models.PaginatedResult-models_BackupTarget": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.BackupTarget"
                    }
                },
                "pagination": {
                    "$ref": "#/definitions/constraint.Pagination"
                }
            }
        },
        "models.PaginatedResult-models_DataService": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.DataService"
                    }
                },
                "pagination": {
                    "$ref": "#/definitions/constraint.Pagination"
                }
            }
        },
        "models.PaginatedResult-models_Deployment": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Deployment"
                    }
                },
                "pagination": {
                    "$ref": "#/definitions/constraint.Pagination"
                }
            }
        },
        "models.PaginatedResult-models_DeploymentTarget": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.DeploymentTarget"
                    }
                },
                "pagination": {
                    "$ref": "#/definitions/constraint.Pagination"
                }
            }
        },
        "models.PaginatedResult-models_Image": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Image"
                    }
                },
                "pagination": {
                    "$ref": "#/definitions/constraint.Pagination"
                }
            }
        },
        "models.PaginatedResult-models_Namespace": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Namespace"
                    }
                },
                "pagination": {
                    "$ref": "#/definitions/constraint.Pagination"
                }
            }
        },
        "models.PaginatedResult-models_Project": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Project"
                    }
                },
                "pagination": {
                    "$ref": "#/definitions/constraint.Pagination"
                }
            }
        },
        "models.PaginatedResult-models_ResourceSettingsTemplate": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ResourceSettingsTemplate"
                    }
                },
                "pagination": {
                    "$ref": "#/definitions/constraint.Pagination"
                }
            }
        },
        "models.PaginatedResult-models_ServiceAccount": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ServiceAccount"
                    }
                },
                "pagination": {
                    "$ref": "#/definitions/constraint.Pagination"
                }
            }
        },
        "models.PaginatedResult-models_StorageOptionsTemplate": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.StorageOptionsTemplate"
                    }
                },
                "pagination": {
                    "$ref": "#/definitions/constraint.Pagination"
                }
            }
        },
        "models.PaginatedResult-models_Tenant": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Tenant"
                    }
                },
                "pagination": {
                    "$ref": "#/definitions/constraint.Pagination"
                }
            }
        },
        "models.PaginatedResult-models_User": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.User"
                    }
                },
                "pagination": {
                    "$ref": "#/definitions/constraint.Pagination"
                }
            }
        },
        "models.PaginatedResult-models_UserAPIKey": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.UserAPIKey"
                    }
                },
                "pagination": {
                    "$ref": "#/definitions/constraint.Pagination"
                }
            }
        },
        "models.PaginatedResult-models_Version": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Version"
                    }
                },
                "pagination": {
                    "$ref": "#/definitions/constraint.Pagination"
                }
            }
        },
        "models.Project": {
            "type": "object",
            "properties": {
                "account_id": {
                    "type": "string"
                },
                "created_at": {
                    "description": "CreatedAt is autogenerated on creation",
                    "type": "string"
                },
                "id": {
                    "description": "ID is auto generated on creation",
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "tenant_id": {
                    "type": "string"
                },
                "updated_at": {
                    "description": "UpdatedAt is autogenerated on update",
                    "type": "string"
                }
            }
        },
        "models.ProjectRoleBinding": {
            "type": "object",
            "properties": {
                "actor_id": {
                    "type": "string"
                },
                "actor_type": {
                    "type": "string"
                },
                "project_id": {
                    "type": "string"
                },
                "role_name": {
                    "type": "string"
                }
            }
        },
        "models.ResourceSettingsSample": {
            "type": "object",
            "properties": {
                "cpu_limit": {
                    "description": "Maximal amount of CPU cores the deployment will have access to inside k8s.",
                    "type": "string"
                },
                "cpu_request": {
                    "description": "Minimal amount of CPU cores the deployment will get reserved inside k8s.",
                    "type": "string"
                },
                "created": {
                    "type": "string"
                },
                "data_service_id": {
                    "type": "string"
                },
                "memory_limit": {
                    "description": "Maximal amount of RAM the deployment will have access to inside k8s.",
                    "type": "string"
                },
                "memory_request": {
                    "description": "Minimal amount of RAM the deployment will get reserved inside k8s.",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the template. Must be unique for a specific data service within the tenant scope.",
                    "type": "string"
                },
                "storage_request": {
                    "description": "Amount of disk space the deployment will get reserved inside k8s.",
                    "type": "string"
                },
                "updated": {
                    "type": "string"
                },
                "version": {
                    "type": "integer"
                }
            }
        },
        "models.ResourceSettingsTemplate": {
            "type": "object",
            "properties": {
                "account_id": {
                    "type": "string"
                },
                "cpu_limit": {
                    "description": "Maximal amount of CPU cores the deployment will have access to inside k8s.",
                    "type": "string"
                },
                "cpu_request": {
                    "description": "Minimal amount of CPU cores the deployment will get reserved inside k8s.",
                    "type": "string"
                },
                "created_at": {
                    "description": "CreatedAt is autogenerated on creation",
                    "type": "string"
                },
                "data_service_id": {
                    "type": "string"
                },
                "id": {
                    "description": "ID is auto generated on creation",
                    "type": "string"
                },
                "memory_limit": {
                    "description": "Maximal amount of RAM the deployment will have access to inside k8s.",
                    "type": "string"
                },
                "memory_request": {
                    "description": "Minimal amount of RAM the deployment will get reserved inside k8s.",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the template. Must be unique for a specific data service within the tenant scope.",
                    "type": "string"
                },
                "storage_request": {
                    "description": "Amount of disk space the deployment will get reserved inside k8s.",
                    "type": "string"
                },
                "tenant_id": {
                    "type": "string"
                },
                "updated_at": {
                    "description": "UpdatedAt is autogenerated on update",
                    "type": "string"
                }
            }
        },
        "models.Restore": {
            "type": "object",
            "properties": {
                "apply_status": {
                    "description": "Status of sending Restore CR to the Target Cluster",
                    "type": "string"
                },
                "backup_job_id": {
                    "description": "ID of the backup to be restored, the job might be already deleted",
                    "type": "string"
                },
                "cloud_credential_name": {
                    "description": "Identifier of the PX cloud credentials of the storage with the backup",
                    "type": "string"
                },
                "cloud_snap_id": {
                    "description": "ID of the PX cloud snapshot with the backup",
                    "type": "string"
                },
                "completion_time": {
                    "description": "Completion time of the restore process",
                    "type": "string"
                },
                "created_at": {
                    "description": "CreatedAt is autogenerated on creation",
                    "type": "string"
                },
                "deployment_id": {
                    "description": "ID of the new deployment that will contain restored data",
                    "type": "string"
                },
                "error_code": {
                    "description": "Error code of the restore from Target Cluster",
                    "type": "string"
                },
                "id": {
                    "description": "ID is auto generated on creation",
                    "type": "string"
                },
                "original_deployment_id": {
                    "description": "ID of the old deployment where the backup comes from, might be already deleted",
                    "type": "string"
                },
                "start_time": {
                    "description": "Starting time of the restore process",
                    "type": "string"
                },
                "status": {
                    "description": "Status of the restore process on the Target Cluster",
                    "type": "string"
                },
                "updated_at": {
                    "description": "UpdatedAt is autogenerated on update",
                    "type": "string"
                }
            }
        },
        "models.S3CompatibleCredentials": {
            "type": "object",
            "properties": {
                "access_key": {
                    "description": "Access key for S3-compatible user.",
                    "type": "string"
                },
                "endpoint": {
                    "description": "Endpoint of S3-compatible storage service.",
                    "type": "string"
                },
                "secret_key": {
                    "description": "Secret key for S3-compatible user.",
                    "type": "string"
                }
            }
        },
        "models.S3Credentials": {
            "type": "object",
            "properties": {
                "access_key": {
                    "description": "Access key for the AWS IAM user.",
                    "type": "string"
                },
                "endpoint": {
                    "description": "Endpoint of S3 storage service.",
                    "type": "string"
                },
                "secret_key": {
                    "description": "Secret key for the AWS IAM user.",
                    "type": "string"
                }
            }
        },
        "models.ServiceAccount": {
            "type": "object",
            "properties": {
                "account_id": {
                    "type": "string"
                },
                "created_at": {
                    "description": "CreatedAt is autogenerated on creation",
                    "type": "string"
                },
                "id": {
                    "description": "ID is auto generated on creation",
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "tenant_id": {
                    "type": "string"
                },
                "updated_at": {
                    "description": "UpdatedAt is autogenerated on update",
                    "type": "string"
                }
            }
        },
        "models.StorageOptionsSample": {
            "type": "object",
            "properties": {
                "created": {
                    "type": "string"
                },
                "fg": {
                    "description": "This option enforces volume group policy. If a volume belonging to a group cannot find nodes for its replication sets which don’t have other volumes of same group, the volume creation will fail.",
                    "type": "boolean"
                },
                "fs": {
                    "description": "Filesystem to be laid out.",
                    "type": "string",
                    "enum": [
                        "xfs",
                        "ext4"
                    ]
                },
                "name": {
                    "description": "Name of the template. Must be unique within the tenant scope.",
                    "type": "string"
                },
                "provisioner": {
                    "description": "Portworx volume provisioner. Valid values are: \"pxd.portworx.com\" for PX CSI, \"kubernetes.io/portworx-volume\" for PX in-tree or \"auto\" for auto-detect",
                    "type": "string",
                    "enum": [
                        "pxd.portworx.com",
                        "kubernetes.io/portworx-volume",
                        "auto"
                    ]
                },
                "repl": {
                    "description": "Replication factor for the volume.",
                    "type": "integer",
                    "enum": [
                        1,
                        2,
                        3
                    ]
                },
                "secure": {
                    "description": "Flag to create an encrypted volume. Currently, not supported (should be set to `false`).",
                    "type": "boolean"
                },
                "updated": {
                    "type": "string"
                },
                "version": {
                    "type": "integer"
                }
            }
        },
        "models.StorageOptionsTemplate": {
            "type": "object",
            "properties": {
                "account_id": {
                    "type": "string"
                },
                "created_at": {
                    "description": "CreatedAt is autogenerated on creation",
                    "type": "string"
                },
                "fg": {
                    "description": "This option enforces volume group policy. If a volume belonging to a group cannot find nodes for its replication sets which don’t have other volumes of same group, the volume creation will fail.",
                    "type": "boolean"
                },
                "fs": {
                    "description": "Filesystem to be laid out.",
                    "type": "string",
                    "enum": [
                        "xfs",
                        "ext4"
                    ]
                },
                "id": {
                    "description": "ID is auto generated on creation",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the template. Must be unique within the tenant scope.",
                    "type": "string"
                },
                "provisioner": {
                    "description": "Portworx volume provisioner. Valid values are: \"pxd.portworx.com\" for PX CSI, \"kubernetes.io/portworx-volume\" for PX in-tree or \"auto\" for auto-detect",
                    "type": "string",
                    "enum": [
                        "pxd.portworx.com",
                        "kubernetes.io/portworx-volume",
                        "auto"
                    ]
                },
                "repl": {
                    "description": "Replication factor for the volume.",
                    "type": "integer",
                    "enum": [
                        1,
                        2,
                        3
                    ]
                },
                "secure": {
                    "description": "Flag to create an encrypted volume. Currently, not supported (should be set to `false`).",
                    "type": "boolean"
                },
                "tenant_id": {
                    "type": "string"
                },
                "updated_at": {
                    "description": "UpdatedAt is autogenerated on update",
                    "type": "string"
                }
            }
        },
        "models.Task": {
            "type": "object",
            "properties": {
                "account_id": {
                    "type": "string"
                },
                "associated_resource": {
                    "type": "string"
                },
                "created_at": {
                    "description": "CreatedAt is autogenerated on creation",
                    "type": "string"
                },
                "current_step": {
                    "type": "integer"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "description": "ID is auto generated on creation",
                    "type": "integer"
                },
                "log": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "project_id": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "tenant_id": {
                    "type": "string"
                },
                "total_steps": {
                    "type": "integer"
                },
                "updated_at": {
                    "description": "UpdatedAt is autogenerated on update",
                    "type": "string"
                }
            }
        },
        "models.Team": {
            "type": "object",
            "properties": {
                "account_id": {
                    "type": "string"
                },
                "created_at": {
                    "description": "CreatedAt is autogenerated on creation",
                    "type": "string"
                },
                "id": {
                    "description": "ID is auto generated on creation",
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "tenant_id": {
                    "type": "string"
                },
                "updated_at": {
                    "description": "UpdatedAt is autogenerated on update",
                    "type": "string"
                }
            }
        },
        "models.Tenant": {
            "type": "object",
            "properties": {
                "account_id": {
                    "type": "string"
                },
                "created_at": {
                    "description": "CreatedAt is autogenerated on creation",
                    "type": "string"
                },
                "id": {
                    "description": "ID is auto generated on creation",
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "updated_at": {
                    "description": "UpdatedAt is autogenerated on update",
                    "type": "string"
                }
            }
        },
        "models.TenantRoleBinding": {
            "type": "object",
            "properties": {
                "actor_id": {
                    "type": "string"
                },
                "actor_type": {
                    "type": "string"
                },
                "role_name": {
                    "type": "string"
                },
                "tenant_id": {
                    "type": "string"
                }
            }
        },
        "models.User": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "CreatedAt is autogenerated on creation",
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "external_id": {
                    "description": "ExternalID identifies a User in context of its Issuer. Therefore, it must\nbe unique in the context of the Issuer. But not necessarily unique across different issuers.\nIn case of PX Central the ExternalID is the 'sub' claim from JWT token",
                    "type": "string"
                },
                "id": {
                    "description": "ID is auto generated on creation",
                    "type": "string"
                },
                "issuer": {
                    "description": "Issuer identifies the identity provider where the User is originating from.\nIt corresponds to the 'iss' claim in the JWT token. Example: \"https://central.portworx.com\"",
                    "type": "string"
                },
                "updated_at": {
                    "description": "UpdatedAt is autogenerated on update",
                    "type": "string"
                }
            }
        },
        "models.UserAPIKey": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "CreatedAt is autogenerated on creation",
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "expires_at": {
                    "type": "string"
                },
                "id": {
                    "description": "ID is auto generated on creation",
                    "type": "string"
                },
                "jwt_token": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "updated_at": {
                    "description": "UpdatedAt is autogenerated on update",
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "models.Version": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "CreatedAt is autogenerated on creation",
                    "type": "string"
                },
                "data_service_id": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "id": {
                    "description": "ID is auto generated on creation",
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "updated_at": {
                    "description": "UpdatedAt is autogenerated on update",
                    "type": "string"
                }
            }
        },
        "policy.Role": {
            "type": "object",
            "properties": {
                "extends": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "level": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "requests.CreateDeploymentTargetRequest": {
            "type": "object",
            "properties": {
                "cluster_id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "tls_issuer": {
                    "type": "string"
                },
                "tls_required": {
                    "type": "boolean"
                }
            }
        },
        "requests.CreateProjectDeploymentRequest": {
            "type": "object",
            "properties": {
                "application_configuration_overrides": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "application_configuration_template_id": {
                    "type": "string"
                },
                "deployment_target_id": {
                    "type": "string"
                },
                "dns_zone": {
                    "type": "string"
                },
                "image_id": {
                    "type": "string"
                },
                "load_balancer_source_ranges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string",
                    "example": "my-service"
                },
                "namespace_id": {
                    "type": "string"
                },
                "node_count": {
                    "type": "integer",
                    "example": 3
                },
                "resource_settings_template_id": {
                    "type": "string"
                },
                "scheduled_backup": {
                    "$ref": "#/definitions/requests.DeploymentScheduledBackup"
                },
                "service_type": {
                    "type": "string"
                },
                "storage_options_template_id": {
                    "type": "string"
                },
                "tls_enabled": {
                    "type": "boolean"
                }
            }
        },
        "requests.CreateRestoreRequest": {
            "type": "object",
            "properties": {
                "deployment_target_id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "namespace_id": {
                    "type": "string"
                }
            }
        },
        "requests.CreateUserAPIKeyRequest": {
            "type": "object",
            "properties": {
                "expires_at": {
                    "description": "Time when the key expires.",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the UserAPIKey. Must be unique for the given User.",
                    "type": "string",
                    "maxLength": 256,
                    "minLength": 1
                }
            }
        },
        "requests.DeleteRoleBindingRequest": {
            "type": "object",
            "properties": {
                "actor_id": {
                    "type": "string"
                },
                "actor_type": {
                    "type": "string"
                }
            }
        },
        "requests.DeploymentScheduledBackup": {
            "type": "object",
            "properties": {
                "backup_policy_id": {
                    "type": "string"
                },
                "backup_target_id": {
                    "description": "BackupTargetID and BackupPolicyID must be both specified.",
                    "type": "string"
                }
            }
        },
        "requests.InvitationAccountRequest": {
            "type": "object",
            "required": [
                "email",
                "role_name"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "role_name": {
                    "type": "string"
                }
            }
        },
        "requests.PatchAccountRoleInvitationRequest": {
            "type": "object",
            "properties": {
                "role_name": {
                    "type": "string"
                }
            }
        },
        "requests.PatchDeploymentTargetRequest": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "tls_issuer": {
                    "type": "string"
                },
                "tls_required": {
                    "type": "boolean"
                }
            }
        },
        "requests.PatchDeploymentTargetsAgentMetadataRequest": {
            "type": "object",
            "properties": {
                "kube_api_version": {
                    "type": "string"
                },
                "kube_platform": {
                    "type": "string"
                },
                "pds_chart_version": {
                    "type": "string"
                },
                "px_csi_enabled": {
                    "type": "string"
                },
                "px_service_namespace": {
                    "type": "string"
                },
                "px_version": {
                    "type": "string"
                }
            }
        },
        "requests.PatchUserAPIKeyRequest": {
            "type": "object",
            "properties": {
                "enabled": {
                    "description": "Whether the UserAPIKey is enabled or disabled.",
                    "type": "boolean"
                },
                "name": {
                    "description": "The name of the UserAPIKey.",
                    "type": "string",
                    "maxLength": 256,
                    "minLength": 1
                }
            }
        },
        "requests.PutBackupJobRequest": {
            "type": "object",
            "required": [
                "project_id"
            ],
            "properties": {
                "backup_id": {
                    "description": "BackupID which backup created the snapshot (nullable).",
                    "type": "string"
                },
                "backup_spec": {
                    "description": "BackupSpecJSON is the specification of the Backup in JSON format at the time the snapshot was taken.",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "cloud_credential_name": {
                    "description": "CloudCredentialName credentials to access snapshot.",
                    "type": "string"
                },
                "cloud_snap_id": {
                    "description": "CloudSnapID snapshot of the backup volume.",
                    "type": "string"
                },
                "completion_status": {
                    "description": "CompletionStatus of the backup job.",
                    "type": "string",
                    "enum": [
                        "Active",
                        "Succeeded",
                        "Failed"
                    ]
                },
                "completion_time": {
                    "type": "string"
                },
                "data_service_spec": {
                    "description": "BackupSpecJSON is the specification of the Backup in JSON format at the time the snapshot was taken.",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "deployment_id": {
                    "description": "DeploymentID which deployment was backed up (nullable).",
                    "type": "string"
                },
                "error_code": {
                    "type": "string",
                    "enum": [
                        "JobFailed",
                        "VolumeSnapshotFailed",
                        "PXCloudCredentialsNotFound"
                    ]
                },
                "error_message": {
                    "type": "string"
                },
                "file_size": {
                    "description": "FileSize of the CloudSnap image.",
                    "type": "integer"
                },
                "name": {
                    "description": "Name of the BackupJob.",
                    "type": "string"
                },
                "project_id": {
                    "description": "ProjectID which created the snapshot (required).",
                    "type": "string"
                },
                "start_time": {
                    "type": "string"
                }
            }
        },
        "requests.UpdateOperatorMetadataRequest": {
            "type": "object",
            "properties": {
                "cluster_id": {
                    "type": "string"
                },
                "pds_features": {
                    "type": "string"
                },
                "pds_operator_version": {
                    "type": "string"
                },
                "px_status": {
                    "type": "string"
                }
            }
        },
        "requests.UpdateRestoreStatusRequest": {
            "type": "object",
            "properties": {
                "completion_status": {
                    "description": "Status of the restore process on the Target Cluster",
                    "type": "string"
                },
                "completion_time": {
                    "description": "CompletionTime of the restore process.",
                    "type": "string"
                },
                "error_code": {
                    "description": "Error code of the restore from Target Cluster",
                    "type": "string"
                },
                "start_time": {
                    "description": "StartTime of the restore process.",
                    "type": "string"
                }
            }
        },
        "requests.UpsertDeploymentManifestRequest": {
            "type": "object",
            "properties": {
                "deleted": {
                    "type": "boolean"
                },
                "manifest": {
                    "type": "object",
                    "additionalProperties": true
                },
                "timestamp": {
                    "type": "string"
                }
            }
        },
        "service.DeploymentResourceEvents": {
            "type": "object",
            "properties": {
                "resourceEvents": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/deployments.ResourceEvents"
                    }
                }
            }
        },
        "service.DeploymentStatus": {
            "type": "object",
            "properties": {
                "health": {
                    "type": "string",
                    "enum": [
                        "Healthy",
                        "Down",
                        "Degraded"
                    ]
                },
                "initialized": {
                    "type": "string",
                    "enum": [
                        "Yes",
                        "No",
                        "Unknown",
                        "Pending",
                        "Manual"
                    ]
                },
                "readyReplicas": {
                    "type": "integer"
                },
                "replicas": {
                    "type": "integer"
                },
                "resources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/deployments.ResourceConditions"
                    }
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "Available",
                        "Partially Available",
                        "Unavailable",
                        "Deploying",
                        "Unknown"
                    ]
                }
            }
        },
        "v1.TypedLocalObjectReference": {
            "type": "object",
            "properties": {
                "apiGroup": {
                    "description": "APIGroup is the group for the resource being referenced.\nIf APIGroup is not specified, the specified Kind must be in the core API group.\nFor any other third-party types, APIGroup is required.\n+optional",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is the type of resource being referenced",
                    "type": "string"
                },
                "name": {
                    "description": "Name is the name of resource being referenced",
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}