/*
PDS API

Portworx Data Services API Server

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pds

import (
	"encoding/json"
)

// checks if the ControllersUpdateApplicationConfigurationTemplateRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ControllersUpdateApplicationConfigurationTemplateRequest{}

// ControllersUpdateApplicationConfigurationTemplateRequest struct for ControllersUpdateApplicationConfigurationTemplateRequest
type ControllersUpdateApplicationConfigurationTemplateRequest struct {
	ConfigItems []ModelsConfigItem `json:"config_items,omitempty"`
	// See models.ApplicationConfigurationTemplate for more information.
	Name *string `json:"name,omitempty"`
}

// NewControllersUpdateApplicationConfigurationTemplateRequest instantiates a new ControllersUpdateApplicationConfigurationTemplateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewControllersUpdateApplicationConfigurationTemplateRequest() *ControllersUpdateApplicationConfigurationTemplateRequest {
	this := ControllersUpdateApplicationConfigurationTemplateRequest{}
	return &this
}

// NewControllersUpdateApplicationConfigurationTemplateRequestWithDefaults instantiates a new ControllersUpdateApplicationConfigurationTemplateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewControllersUpdateApplicationConfigurationTemplateRequestWithDefaults() *ControllersUpdateApplicationConfigurationTemplateRequest {
	this := ControllersUpdateApplicationConfigurationTemplateRequest{}
	return &this
}

// GetConfigItems returns the ConfigItems field value if set, zero value otherwise.
func (o *ControllersUpdateApplicationConfigurationTemplateRequest) GetConfigItems() []ModelsConfigItem {
	if o == nil || IsNil(o.ConfigItems) {
		var ret []ModelsConfigItem
		return ret
	}
	return o.ConfigItems
}

// GetConfigItemsOk returns a tuple with the ConfigItems field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ControllersUpdateApplicationConfigurationTemplateRequest) GetConfigItemsOk() ([]ModelsConfigItem, bool) {
	if o == nil || IsNil(o.ConfigItems) {
		return nil, false
	}
	return o.ConfigItems, true
}

// HasConfigItems returns a boolean if a field has been set.
func (o *ControllersUpdateApplicationConfigurationTemplateRequest) HasConfigItems() bool {
	if o != nil && !IsNil(o.ConfigItems) {
		return true
	}

	return false
}

// SetConfigItems gets a reference to the given []ModelsConfigItem and assigns it to the ConfigItems field.
func (o *ControllersUpdateApplicationConfigurationTemplateRequest) SetConfigItems(v []ModelsConfigItem) {
	o.ConfigItems = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ControllersUpdateApplicationConfigurationTemplateRequest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ControllersUpdateApplicationConfigurationTemplateRequest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ControllersUpdateApplicationConfigurationTemplateRequest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ControllersUpdateApplicationConfigurationTemplateRequest) SetName(v string) {
	o.Name = &v
}

func (o ControllersUpdateApplicationConfigurationTemplateRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ControllersUpdateApplicationConfigurationTemplateRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ConfigItems) {
		toSerialize["config_items"] = o.ConfigItems
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	return toSerialize, nil
}

type NullableControllersUpdateApplicationConfigurationTemplateRequest struct {
	value *ControllersUpdateApplicationConfigurationTemplateRequest
	isSet bool
}

func (v NullableControllersUpdateApplicationConfigurationTemplateRequest) Get() *ControllersUpdateApplicationConfigurationTemplateRequest {
	return v.value
}

func (v *NullableControllersUpdateApplicationConfigurationTemplateRequest) Set(val *ControllersUpdateApplicationConfigurationTemplateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableControllersUpdateApplicationConfigurationTemplateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableControllersUpdateApplicationConfigurationTemplateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableControllersUpdateApplicationConfigurationTemplateRequest(val *ControllersUpdateApplicationConfigurationTemplateRequest) *NullableControllersUpdateApplicationConfigurationTemplateRequest {
	return &NullableControllersUpdateApplicationConfigurationTemplateRequest{value: val, isSet: true}
}

func (v NullableControllersUpdateApplicationConfigurationTemplateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableControllersUpdateApplicationConfigurationTemplateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


