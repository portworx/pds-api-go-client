/*
PDS API

Portworx Data Services API Server

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pds

import (
	"encoding/json"
)

// checks if the DeploymentsResourceEvents type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeploymentsResourceEvents{}

// DeploymentsResourceEvents struct for DeploymentsResourceEvents
type DeploymentsResourceEvents struct {
	Events []DeploymentsResourceEvent `json:"events,omitempty"`
	Resource *V1TypedLocalObjectReference `json:"resource,omitempty"`
}

// NewDeploymentsResourceEvents instantiates a new DeploymentsResourceEvents object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeploymentsResourceEvents() *DeploymentsResourceEvents {
	this := DeploymentsResourceEvents{}
	return &this
}

// NewDeploymentsResourceEventsWithDefaults instantiates a new DeploymentsResourceEvents object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeploymentsResourceEventsWithDefaults() *DeploymentsResourceEvents {
	this := DeploymentsResourceEvents{}
	return &this
}

// GetEvents returns the Events field value if set, zero value otherwise.
func (o *DeploymentsResourceEvents) GetEvents() []DeploymentsResourceEvent {
	if o == nil || IsNil(o.Events) {
		var ret []DeploymentsResourceEvent
		return ret
	}
	return o.Events
}

// GetEventsOk returns a tuple with the Events field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeploymentsResourceEvents) GetEventsOk() ([]DeploymentsResourceEvent, bool) {
	if o == nil || IsNil(o.Events) {
		return nil, false
	}
	return o.Events, true
}

// HasEvents returns a boolean if a field has been set.
func (o *DeploymentsResourceEvents) HasEvents() bool {
	if o != nil && !IsNil(o.Events) {
		return true
	}

	return false
}

// SetEvents gets a reference to the given []DeploymentsResourceEvent and assigns it to the Events field.
func (o *DeploymentsResourceEvents) SetEvents(v []DeploymentsResourceEvent) {
	o.Events = v
}

// GetResource returns the Resource field value if set, zero value otherwise.
func (o *DeploymentsResourceEvents) GetResource() V1TypedLocalObjectReference {
	if o == nil || IsNil(o.Resource) {
		var ret V1TypedLocalObjectReference
		return ret
	}
	return *o.Resource
}

// GetResourceOk returns a tuple with the Resource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeploymentsResourceEvents) GetResourceOk() (*V1TypedLocalObjectReference, bool) {
	if o == nil || IsNil(o.Resource) {
		return nil, false
	}
	return o.Resource, true
}

// HasResource returns a boolean if a field has been set.
func (o *DeploymentsResourceEvents) HasResource() bool {
	if o != nil && !IsNil(o.Resource) {
		return true
	}

	return false
}

// SetResource gets a reference to the given V1TypedLocalObjectReference and assigns it to the Resource field.
func (o *DeploymentsResourceEvents) SetResource(v V1TypedLocalObjectReference) {
	o.Resource = &v
}

func (o DeploymentsResourceEvents) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeploymentsResourceEvents) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Events) {
		toSerialize["events"] = o.Events
	}
	if !IsNil(o.Resource) {
		toSerialize["resource"] = o.Resource
	}
	return toSerialize, nil
}

type NullableDeploymentsResourceEvents struct {
	value *DeploymentsResourceEvents
	isSet bool
}

func (v NullableDeploymentsResourceEvents) Get() *DeploymentsResourceEvents {
	return v.value
}

func (v *NullableDeploymentsResourceEvents) Set(val *DeploymentsResourceEvents) {
	v.value = val
	v.isSet = true
}

func (v NullableDeploymentsResourceEvents) IsSet() bool {
	return v.isSet
}

func (v *NullableDeploymentsResourceEvents) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeploymentsResourceEvents(val *DeploymentsResourceEvents) *NullableDeploymentsResourceEvents {
	return &NullableDeploymentsResourceEvents{value: val, isSet: true}
}

func (v NullableDeploymentsResourceEvents) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeploymentsResourceEvents) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


