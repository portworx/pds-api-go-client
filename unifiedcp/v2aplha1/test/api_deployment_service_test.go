/*
public/portworx/pds/tasks/apiv1/tasks.proto

Testing DeploymentServiceAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package pdsclient

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_pdsclient_DeploymentServiceAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test DeploymentServiceAPIService DeploymentServiceCreateDeployment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var namespaceId string

		resp, httpRes, err := apiClient.DeploymentServiceAPI.DeploymentServiceCreateDeployment(context.Background(), namespaceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeploymentServiceAPIService DeploymentServiceDeleteDeployment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.DeploymentServiceAPI.DeploymentServiceDeleteDeployment(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeploymentServiceAPIService DeploymentServiceGetDeployment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.DeploymentServiceAPI.DeploymentServiceGetDeployment(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeploymentServiceAPIService DeploymentServiceGetDeploymentCredentials", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.DeploymentServiceAPI.DeploymentServiceGetDeploymentCredentials(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeploymentServiceAPIService DeploymentServiceListDeployments", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DeploymentServiceAPI.DeploymentServiceListDeployments(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeploymentServiceAPIService DeploymentServiceUpdateDeployment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DeploymentServiceAPI.DeploymentServiceUpdateDeployment(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
