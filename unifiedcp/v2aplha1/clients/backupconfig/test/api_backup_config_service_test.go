/*
public/portworx/pds/backupconfig/apiv1/backupconfig.proto

Testing BackupConfigServiceAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package backupconfig

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/portworx/pds-api-go-client/unifiedcp/v2alpha2/clients/backupconfig"
)

func Test_backupconfig_BackupConfigServiceAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test BackupConfigServiceAPIService BackupConfigServiceCreateBackupConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string

		resp, httpRes, err := apiClient.BackupConfigServiceAPI.BackupConfigServiceCreateBackupConfig(context.Background(), projectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BackupConfigServiceAPIService BackupConfigServiceDeleteBackupConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.BackupConfigServiceAPI.BackupConfigServiceDeleteBackupConfig(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BackupConfigServiceAPIService BackupConfigServiceGetBackupConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.BackupConfigServiceAPI.BackupConfigServiceGetBackupConfig(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BackupConfigServiceAPIService BackupConfigServiceListBackupConfigs", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BackupConfigServiceAPI.BackupConfigServiceListBackupConfigs(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BackupConfigServiceAPIService BackupConfigServiceUpdateBackupConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var backupConfigMetaUid string

		resp, httpRes, err := apiClient.BackupConfigServiceAPI.BackupConfigServiceUpdateBackupConfig(context.Background(), backupConfigMetaUid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
