/*
public/portworx/pds/backup/apiv1/backup.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package clients

import (
	"net/http"

	"github.com/portworx/pds-api-go-client/unifiedcp/v2alpha2/clients/backup"
	"github.com/portworx/pds-api-go-client/unifiedcp/v2alpha2/clients/backupconfig"
	"github.com/portworx/pds-api-go-client/unifiedcp/v2alpha2/clients/catalog"
	"github.com/portworx/pds-api-go-client/unifiedcp/v2alpha2/clients/copilot"
	"github.com/portworx/pds-api-go-client/unifiedcp/v2alpha2/clients/deployment"
	"github.com/portworx/pds-api-go-client/unifiedcp/v2alpha2/clients/deploymentconfigupdate"
	"github.com/portworx/pds-api-go-client/unifiedcp/v2alpha2/clients/deploymentevents"
	"github.com/portworx/pds-api-go-client/unifiedcp/v2alpha2/clients/images"
	"github.com/portworx/pds-api-go-client/unifiedcp/v2alpha2/clients/restore"
	"github.com/portworx/pds-api-go-client/unifiedcp/v2alpha2/clients/tasks"
)

// APIClient manages communication with the public/portworx/pds/backup/apiv1/backup.proto API vversion not set
// In most cases there should be only one, shared, APIClient.
type APIClient struct {
	cfg    *Configuration
	// API Services
	BackupServiceClient *backup.APIClient
	// API Services

	DataServicesServiceClient *catalog.APIClient

	BackupConfigServiceClient *backupconfig.APIClient

	CopilotServiceClient *copilot.APIClient

	DeploymentServiceClient *deployment.APIClient

	DeploymentConfigClient *deploymentconfigupdate.APIClient

	DeploymentEventServiceClient *deploymentevents.APIClient

	ImageServiceClient *images.APIClient

	RestoreServiceClient *restore.APIClient

	TaskServiceClient *tasks.APIClient

}

type service struct {
	client *APIClient
}

// NewAPIClient creates a new API client. Requires a userAgent string describing your application.
// optionally a custom http.Client to allow for advanced features such as caching.
func NewAPIClient(cfg *Configuration) *APIClient {
	if cfg.HTTPClient == nil {
		cfg.HTTPClient = http.DefaultClient
	}

	c := &APIClient{}
	c.cfg = cfg

	// API Services
	c.BackupServiceClient = backup.NewAPIClient(&backup.Configuration{
		Host: cfg.Host,
		HTTPClient: cfg.HTTPClient,
		Scheme: cfg.Scheme,
		DefaultHeader: cfg.DefaultHeader,
		UserAgent: cfg.UserAgent,
		Debug: cfg.Debug,
		Servers: backup.NewConfiguration().Servers,
		OperationServers: backup.NewConfiguration().OperationServers,
	})

	c.DataServicesServiceClient = catalog.NewAPIClient(&catalog.Configuration{
		Host: cfg.Host,
		HTTPClient: cfg.HTTPClient,
		Scheme: cfg.Scheme,
		DefaultHeader: cfg.DefaultHeader,
		UserAgent: cfg.UserAgent,
		Debug: cfg.Debug,
		Servers: catalog.NewConfiguration().Servers,
		OperationServers: catalog.NewConfiguration().OperationServers,
	})

	c.BackupConfigServiceClient = backupconfig.NewAPIClient(
		&backupconfig.Configuration{
			Host: cfg.Host,
			HTTPClient: cfg.HTTPClient,
			Scheme: cfg.Scheme,
			DefaultHeader: cfg.DefaultHeader,
			UserAgent: cfg.UserAgent,
			Debug: cfg.Debug,
			Servers: backupconfig.NewConfiguration().Servers,
			OperationServers: backupconfig.NewConfiguration().OperationServers,
		},
	)

	c.CopilotServiceClient = copilot.NewAPIClient(
		&copilot.Configuration{
			Host: cfg.Host,
			HTTPClient: cfg.HTTPClient,
			Scheme: cfg.Scheme,
			DefaultHeader: cfg.DefaultHeader,
			UserAgent: cfg.UserAgent,
			Debug: cfg.Debug,
			Servers: copilot.NewConfiguration().Servers,
			OperationServers: copilot.NewConfiguration().OperationServers,
		},
	)

	c.DeploymentServiceClient = deployment.NewAPIClient(
		&deployment.Configuration{
			Host: cfg.Host,
			HTTPClient: cfg.HTTPClient,
			Scheme: cfg.Scheme,
			DefaultHeader: cfg.DefaultHeader,
			UserAgent: cfg.UserAgent,
			Debug: cfg.Debug,
			Servers: deployment.NewConfiguration().Servers,
			OperationServers: deployment.NewConfiguration().OperationServers,
		},
	)

	c.DeploymentConfigClient = deploymentconfigupdate.NewAPIClient(
		&deploymentconfigupdate.Configuration{
			Host: cfg.Host,
			HTTPClient: cfg.HTTPClient,
			Scheme: cfg.Scheme,
			DefaultHeader: cfg.DefaultHeader,
			UserAgent: cfg.UserAgent,
			Debug: cfg.Debug,
			Servers: deploymentconfigupdate.NewConfiguration().Servers,
			OperationServers: deploymentconfigupdate.NewConfiguration().OperationServers,
		},
	)

	c.DeploymentEventServiceClient = deploymentevents.NewAPIClient(
		&deploymentevents.Configuration{
			Host: cfg.Host,
			HTTPClient: cfg.HTTPClient,
			Scheme: cfg.Scheme,
			DefaultHeader: cfg.DefaultHeader,
			UserAgent: cfg.UserAgent,
			Debug: cfg.Debug,
			Servers: deploymentevents.NewConfiguration().Servers,
			OperationServers: deploymentevents.NewConfiguration().OperationServers,
		},
	)

	c.ImageServiceClient = images.NewAPIClient(
		&images.Configuration{
			Host: cfg.Host,
			HTTPClient: cfg.HTTPClient,
			Scheme: cfg.Scheme,
			DefaultHeader: cfg.DefaultHeader,
			UserAgent: cfg.UserAgent,
			Debug: cfg.Debug,
			Servers: images.NewConfiguration().Servers,
			OperationServers: images.NewConfiguration().OperationServers,
		},
	)

	c.RestoreServiceClient = restore.NewAPIClient(
		&restore.Configuration{
			Host: cfg.Host,
			HTTPClient: cfg.HTTPClient,
			Scheme: cfg.Scheme,
			DefaultHeader: cfg.DefaultHeader,
			UserAgent: cfg.UserAgent,
			Debug: cfg.Debug,
			Servers: restore.NewConfiguration().Servers,
			OperationServers: restore.NewConfiguration().OperationServers,
		},
	)

	c.TaskServiceClient = tasks.NewAPIClient(
		&tasks.Configuration{
			Host: cfg.Host,
			HTTPClient: cfg.HTTPClient,
			Scheme: cfg.Scheme,
			DefaultHeader: cfg.DefaultHeader,
			UserAgent: cfg.UserAgent,
			Debug: cfg.Debug,
			Servers: tasks.NewConfiguration().Servers,
			OperationServers: tasks.NewConfiguration().OperationServers,
		},
	)

	return c
}

type Configuration struct {
	Host             string            `json:"host,omitempty"`
	Scheme           string            `json:"scheme,omitempty"`
	DefaultHeader    map[string]string `json:"defaultHeader,omitempty"`
	UserAgent        string            `json:"userAgent,omitempty"`
	Debug            bool              `json:"debug,omitempty"`
	Servers          ServerConfigurations
	OperationServers map[string]ServerConfigurations
	HTTPClient       *http.Client
}

// ServerConfiguration stores the information about a server
type ServerConfiguration struct {
	URL string
	Description string
	Variables map[string]ServerVariable
}

// ServerConfigurations stores multiple ServerConfiguration items
type ServerConfigurations []ServerConfiguration

// ServerVariable stores the information about a server variable
type ServerVariable struct {
	Description  string
	DefaultValue string
	EnumValues   []string
}