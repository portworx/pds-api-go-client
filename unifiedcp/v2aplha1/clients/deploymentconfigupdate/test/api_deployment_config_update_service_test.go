/*
public/portworx/pds/deploymentconfigupdate/apiv1/deploymentconfigupdate.proto

Testing DeploymentConfigUpdateServiceAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package deploymentconfigupdate

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/portworx/pds-api-go-client/unifiedcp/v2alpha2/clients/deploymentconfigupdate"
)

func Test_deploymentconfigupdate_DeploymentConfigUpdateServiceAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test DeploymentConfigUpdateServiceAPIService DeploymentConfigUpdateServiceCreateDeploymentConfigUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var deploymentConfigUpdateConfigDeploymentMetaUid string

		resp, httpRes, err := apiClient.DeploymentConfigUpdateServiceAPI.DeploymentConfigUpdateServiceCreateDeploymentConfigUpdate(context.Background(), deploymentConfigUpdateConfigDeploymentMetaUid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeploymentConfigUpdateServiceAPIService DeploymentConfigUpdateServiceGetDeploymentConfigUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.DeploymentConfigUpdateServiceAPI.DeploymentConfigUpdateServiceGetDeploymentConfigUpdate(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeploymentConfigUpdateServiceAPIService DeploymentConfigUpdateServiceListDeploymentConfigUpdates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DeploymentConfigUpdateServiceAPI.DeploymentConfigUpdateServiceListDeploymentConfigUpdates(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DeploymentConfigUpdateServiceAPIService DeploymentConfigUpdateServiceRetryDeploymentConfigUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.DeploymentConfigUpdateServiceAPI.DeploymentConfigUpdateServiceRetryDeploymentConfigUpdate(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
