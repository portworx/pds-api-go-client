openapi: 3.0.3
info:
  title: public/portworx/pds/backup/apiv1/backup.proto
  version: version not set
servers:
- url: /
tags:
- name: BackupService
paths:
  /pds/v1/backups:
    get:
      operationId: BackupService_ListBackups
      parameters:
      - description: UID of the account.
        explode: true
        in: query
        name: accountId
        required: false
        schema:
          type: string
        style: form
      - description: UID of the tenant.
        explode: true
        in: query
        name: tenantId
        required: false
        schema:
          type: string
        style: form
      - description: UID of the target cluster.
        explode: true
        in: query
        name: clusterId
        required: false
        schema:
          type: string
        style: form
      - description: UID of the namespace.
        explode: true
        in: query
        name: namespaceId
        required: false
        schema:
          type: string
        style: form
      - description: UID of the project.
        explode: true
        in: query
        name: projectId
        required: false
        schema:
          type: string
        style: form
      - description: UID of the backupConfiguration
        explode: true
        in: query
        name: backupConfigId
        required: false
        schema:
          type: string
        style: form
      - description: Page number is the page number to return based on the size
        explode: true
        in: query
        name: pagination.pageNumber
        required: false
        schema:
          format: int64
          type: string
        style: form
      - description: Page size is the maximum number of records to include per page
        explode: true
        in: query
        name: pagination.pageSize
        required: false
        schema:
          format: int64
          type: string
        style: form
      - description: |-
          Name of the attribute to sort results by.

           - FIELD_UNSPECIFIED: Unspecified, do not use.
           - NAME: Sorting based on the name of the resource.
           - CREATED_AT: Sorting on create time of the resource.
           - UPDATED_AT: Sorting on update time of the resource.
           - PHASE: Sorting on phase of the resource.
        explode: true
        in: query
        name: sort.sortBy
        required: false
        schema:
          default: FIELD_UNSPECIFIED
          enum:
          - FIELD_UNSPECIFIED
          - NAME
          - CREATED_AT
          - UPDATED_AT
          - PHASE
          type: string
        style: form
      - description: |-
          Order of sorting to be applied on requested list.
          If sort_by having some value and sort_order is not provided, by default ascending order will be used to sort the list.

           - VALUE_UNSPECIFIED: Unspecified, do not use.
           - ASC: Sort order ascending.
           - DESC: Sort order descending.
        explode: true
        in: query
        name: sort.sortOrder
        required: false
        schema:
          default: VALUE_UNSPECIFIED
          enum:
          - VALUE_UNSPECIFIED
          - ASC
          - DESC
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1ListBackupsResponse'
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/googlerpcStatus'
          description: An unexpected error response.
      summary: ListBackups API lists the Backup resources.
      tags:
      - BackupService
  /pds/v1/backups/{id}:
    delete:
      operationId: BackupService_DeleteBackup
      parameters:
      - description: UID of the Backup.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                properties: {}
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/googlerpcStatus'
          description: An unexpected error response.
      summary: DeleteBackup API deletes the Backup resource.
      tags:
      - BackupService
    get:
      operationId: BackupService_GetBackup
      parameters:
      - description: UID of the Backup.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1Backup'
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/googlerpcStatus'
          description: An unexpected error response.
      summary: GetBackup API returns the Backup resource.
      tags:
      - BackupService
components:
  schemas:
    SortByField:
      default: FIELD_UNSPECIFIED
      description: |-
        Field names for sorting the list of resources.

         - FIELD_UNSPECIFIED: Unspecified, do not use.
         - NAME: Sorting based on the name of the resource.
         - CREATED_AT: Sorting on create time of the resource.
         - UPDATED_AT: Sorting on update time of the resource.
         - PHASE: Sorting on phase of the resource.
      enum:
      - FIELD_UNSPECIFIED
      - NAME
      - CREATED_AT
      - UPDATED_AT
      - PHASE
      type: string
    SortOrderValue:
      default: VALUE_UNSPECIFIED
      description: |-
        Value of sort order for the list of resources.

         - VALUE_UNSPECIFIED: Unspecified, do not use.
         - ASC: Sort order ascending.
         - DESC: Sort order descending.
      enum:
      - VALUE_UNSPECIFIED
      - ASC
      - DESC
      type: string
    StatusPhase:
      default: PHASE_UNSPECIFIED
      description: |-
        Enum for Phase of the Deployment.

         - PHASE_UNSPECIFIED: Phase is unspecified.
         - QUEUED: Backup is Queued.
         - COMPLETED: Backup is completed.
         - FAILED: Backup is failed.
      enum:
      - PHASE_UNSPECIFIED
      - QUEUED
      - COMPLETED
      - FAILED
      type: string
    backupv1Status:
      description: Status of the Backup.
      example:
        phase: null
        completionTime: 2000-01-23T04:56:07.000+00:00
        cloudSnapId: cloudSnapId
        fileSize: fileSize
        errorMessage: errorMessage
        errorCode: errorCode
        startTime: 2000-01-23T04:56:07.000+00:00
      properties:
        cloudSnapId:
          title: CloudSnapID snapshot of the backup volume
          type: string
        startTime:
          format: date-time
          title: Start time of backup
          type: string
        completionTime:
          format: date-time
          title: Completion time of backup
          type: string
        phase:
          $ref: '#/components/schemas/StatusPhase'
        errorCode:
          description: ErrorCode if CompletionStatus is "Failed".
          type: string
        errorMessage:
          title: ErrorMessage associated with the ErrorCode
          type: string
        fileSize:
          description: FileSize of the CloudSnap image.
          format: int64
          type: string
      type: object
    googlerpcStatus:
      properties:
        code:
          format: int32
          type: integer
        message:
          type: string
        details:
          items:
            $ref: '#/components/schemas/protobufAny'
          type: array
      type: object
    protobufAny:
      additionalProperties: {}
      description: |-
        `Any` contains an arbitrary serialized protocol buffer message along with a
        URL that describes the type of the serialized message.

        Protobuf library provides support to pack/unpack Any values in the form
        of utility functions or additional generated methods of the Any type.

        Example 1: Pack and unpack a message in C++.

            Foo foo = ...;
            Any any;
            any.PackFrom(foo);
            ...
            if (any.UnpackTo(&foo)) {
              ...
            }

        Example 2: Pack and unpack a message in Java.

            Foo foo = ...;
            Any any = Any.pack(foo);
            ...
            if (any.is(Foo.class)) {
              foo = any.unpack(Foo.class);
            }
            // or ...
            if (any.isSameTypeAs(Foo.getDefaultInstance())) {
              foo = any.unpack(Foo.getDefaultInstance());
            }

         Example 3: Pack and unpack a message in Python.

            foo = Foo(...)
            any = Any()
            any.Pack(foo)
            ...
            if any.Is(Foo.DESCRIPTOR):
              any.Unpack(foo)
              ...

         Example 4: Pack and unpack a message in Go

             foo := &pb.Foo{...}
             any, err := anypb.New(foo)
             if err != nil {
               ...
             }
             ...
             foo := &pb.Foo{}
             if err := any.UnmarshalTo(foo); err != nil {
               ...
             }

        The pack methods provided by protobuf library will by default use
        'type.googleapis.com/full.type.name' as the type URL and the unpack
        methods only use the fully qualified type name after the last '/'
        in the type URL, for example "foo.bar.com/x/y.z" will yield type
        name "y.z".

        JSON
        ====
        The JSON representation of an `Any` value uses the regular
        representation of the deserialized, embedded message, with an
        additional field `@type` which contains the type URL. Example:

            package google.profile;
            message Person {
              string first_name = 1;
              string last_name = 2;
            }

            {
              "@type": "type.googleapis.com/google.profile.Person",
              "firstName": <string>,
              "lastName": <string>
            }

        If the embedded message type is well-known and has a custom JSON
        representation, that representation will be embedded adding a field
        `value` which holds the custom JSON in addition to the `@type`
        field. Example (for message [google.protobuf.Duration][]):

            {
              "@type": "type.googleapis.com/google.protobuf.Duration",
              "value": "1.212s"
            }
      properties:
        '@type':
          description: |-
            A URL/resource name that uniquely identifies the type of the serialized
            protocol buffer message. This string must contain at least
            one "/" character. The last segment of the URL's path must represent
            the fully qualified name of the type (as in
            `path/google.protobuf.Duration`). The name should be in a canonical form
            (e.g., leading "." is not accepted).

            In practice, teams usually precompile into the binary all types that they
            expect it to use in the context of Any. However, for URLs which use the
            scheme `http`, `https`, or no scheme, one can optionally set up a type
            server that maps type URLs to message definitions as follows:

            * If no scheme is provided, `https` is assumed.
            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
              value in binary format, or produce an error.
            * Applications are allowed to cache lookup results based on the
              URL, or have them precompiled into a binary to avoid any
              lookup. Therefore, binary compatibility needs to be preserved
              on changes to types. (Use versioned type names to manage
              breaking changes.)

            Note: this functionality is not currently available in the official
            protobuf release, and it is not used for type URLs beginning with
            type.googleapis.com. As of May 2023, there are no widely used type server
            implementations and no plans to implement one.

            Schemes other than `http`, `https` (or the empty scheme) might be
            used with implementation specific semantics.
          type: string
      type: object
    v1Backup:
      example:
        meta:
          uid: uid
          parentReference:
            uid: uid
            type: type
            version: version
          createTime: 2000-01-23T04:56:07.000+00:00
          resourceVersion: resourceVersion
          name: name
          description: description
          annotations:
            key: annotations
          updateTime: 2000-01-23T04:56:07.000+00:00
          labels:
            key: labels
        config:
          references:
            imageId: imageId
          backupCapability: backupCapability
        status:
          phase: null
          completionTime: 2000-01-23T04:56:07.000+00:00
          cloudSnapId: cloudSnapId
          fileSize: fileSize
          errorMessage: errorMessage
          errorCode: errorCode
          startTime: 2000-01-23T04:56:07.000+00:00
      properties:
        meta:
          $ref: '#/components/schemas/v1Meta'
        config:
          $ref: '#/components/schemas/v1Config'
        status:
          $ref: '#/components/schemas/backupv1Status'
      title: Resource representing a Data Service Backup
      type: object
    v1Config:
      description: Desired configuration of the Backup.
      example:
        references:
          imageId: imageId
        backupCapability: backupCapability
      properties:
        references:
          $ref: '#/components/schemas/v1References'
        backupCapability:
          description: BackupCapability of the deployment target when the snapshot
            was created.
          type: string
      type: object
    v1ListBackupsResponse:
      description: Reponse to list Backup request.
      example:
        pagination:
          totalRecords: totalRecords
          nextPage: nextPage
          totalPages: totalPages
          pageSize: pageSize
          prevPage: prevPage
          currentPage: currentPage
        backups:
        - meta:
            uid: uid
            parentReference:
              uid: uid
              type: type
              version: version
            createTime: 2000-01-23T04:56:07.000+00:00
            resourceVersion: resourceVersion
            name: name
            description: description
            annotations:
              key: annotations
            updateTime: 2000-01-23T04:56:07.000+00:00
            labels:
              key: labels
          config:
            references:
              imageId: imageId
            backupCapability: backupCapability
          status:
            phase: null
            completionTime: 2000-01-23T04:56:07.000+00:00
            cloudSnapId: cloudSnapId
            fileSize: fileSize
            errorMessage: errorMessage
            errorCode: errorCode
            startTime: 2000-01-23T04:56:07.000+00:00
        - meta:
            uid: uid
            parentReference:
              uid: uid
              type: type
              version: version
            createTime: 2000-01-23T04:56:07.000+00:00
            resourceVersion: resourceVersion
            name: name
            description: description
            annotations:
              key: annotations
            updateTime: 2000-01-23T04:56:07.000+00:00
            labels:
              key: labels
          config:
            references:
              imageId: imageId
            backupCapability: backupCapability
          status:
            phase: null
            completionTime: 2000-01-23T04:56:07.000+00:00
            cloudSnapId: cloudSnapId
            fileSize: fileSize
            errorMessage: errorMessage
            errorCode: errorCode
            startTime: 2000-01-23T04:56:07.000+00:00
      properties:
        backups:
          description: List of backup resources.
          items:
            $ref: '#/components/schemas/v1Backup'
          type: array
        pagination:
          $ref: '#/components/schemas/v1PageBasedPaginationResponse'
      type: object
    v1Meta:
      description: Meta holds general resource metadata.
      example:
        uid: uid
        parentReference:
          uid: uid
          type: type
          version: version
        createTime: 2000-01-23T04:56:07.000+00:00
        resourceVersion: resourceVersion
        name: name
        description: description
        annotations:
          key: annotations
        updateTime: 2000-01-23T04:56:07.000+00:00
        labels:
          key: labels
      properties:
        uid:
          description: UID of the resource of the format <resource prefix>-<uuid>.
          type: string
        name:
          description: Name of the resource.
          type: string
        description:
          description: Description of the resource.
          type: string
        resourceVersion:
          description: |-
            A string that identifies the version of this object that can be used by
            clients to determine when objects have changed. This value must be passed
            unmodified back to the server by the client.
          type: string
        createTime:
          description: Creation time of the object.
          format: date-time
          readOnly: true
          type: string
        updateTime:
          description: Update time of the object.
          format: date-time
          readOnly: true
          type: string
        labels:
          additionalProperties:
            type: string
          description: Labels to apply to the object.
          type: object
        annotations:
          additionalProperties:
            type: string
          description: Annotations for the object.
          type: object
        parentReference:
          $ref: '#/components/schemas/v1Reference'
      type: object
    v1PageBasedPaginationRequest:
      properties:
        pageNumber:
          format: int64
          title: Page number is the page number to return based on the size
          type: string
        pageSize:
          format: int64
          title: Page size is the maximum number of records to include per page
          type: string
      title: Request parameters for page-based pagination
      type: object
    v1PageBasedPaginationResponse:
      example:
        totalRecords: totalRecords
        nextPage: nextPage
        totalPages: totalPages
        pageSize: pageSize
        prevPage: prevPage
        currentPage: currentPage
      properties:
        totalRecords:
          format: int64
          title: Total records without pagination available in the dataset
          type: string
        currentPage:
          format: int64
          title: Current page number for this paginated response
          type: string
        pageSize:
          format: int64
          title: Page size used for pagination
          type: string
        totalPages:
          format: int64
          title: Total pages based on the page_size provided in the request
          type: string
        nextPage:
          format: int64
          title: "Next page if available in the dataset, -1 if unavailable"
          type: string
        prevPage:
          format: int64
          title: "Previous page if available in the dataset, -1 if unavailable"
          type: string
      title: Metadata related to page based pagination for paginated API responses
      type: object
    v1Reference:
      description: |-
        Reference identifies the resource type, version of the uid and
        the resource.
      example:
        uid: uid
        type: type
        version: version
      properties:
        type:
          description: API group of the resource.
          type: string
        version:
          description: Version of the API.
          type: string
        uid:
          description: UID of the resource.
          type: string
      type: object
    v1References:
      description: References to other resources.
      example:
        imageId: imageId
      properties:
        imageId:
          description: UID of the image of the data service which will needs to be
            backup .
          type: string
      type: object
    v1Sort:
      description: The details of the attribute for which the requested list of resource
        to be sorted.
      properties:
        sortBy:
          $ref: '#/components/schemas/SortByField'
        sortOrder:
          $ref: '#/components/schemas/SortOrderValue'
      type: object
